# MATLAB snippets generated using https://github.com/aminya/Matlab-Snippets
'.source.matlab, source.m':

    "uint16":
        prefix: "uint16"
        body: '''${1:y} = uint16(${1:x})'''
        description: '''y = uint16(x)'''


    "ge":
        prefix: "ge"
        body: '''${1:tf} = ge(${1:A}, ${2:B})'''
        description: '''tf = ge(A, B)'''


    "uint8":
        prefix: "uint8"
        body: '''${1:y} = uint8(${1:x})'''
        description: '''y = uint8(x)'''


    "ismatrix":
        prefix: "ismatrix"
        body: '''${1:TF} = ismatrix(${1:V})'''
        description: '''TF = ismatrix(V)'''


    "length":
        prefix: "length"
        body: '''${1:L} = length(${1:X})'''
        description: '''L = length(X)'''


    "maxk":
        prefix: "maxk"
        body: '''[${1:B}, ${2:I}] = maxk(${1:A}, ${2:k}, ${3:dim})'''
        description: '''[B, I] = maxk(A, k, dim)'''


    "countcats":
        prefix: "countcats"
        body: '''${1:B} = countcats(${1:A}, ${2:dim})'''
        description: '''B = countcats(A, dim)'''


    "uint32":
        prefix: "uint32"
        body: '''${1:y} = uint32(${1:x})'''
        description: '''y = uint32(x)'''


    "union":
        prefix: "union"
        body: '''[${1:C}, ${2:ia}, ${3:ib}] = union(${1:A}, ${2:B}, ${3:'rows'}, ${4:setOrder})'''
        description: '''[C, ia, ib] = union(A, B, 'rows', setOrder)'''


    "issortedrows":
        prefix: "issortedrows"
        body: '''${1:TF} = issortedrows(${1:A}, ${2:column}, ${3:direction}, 'MissingPlacement', ${4:value})'''
        description: '''TF = issortedrows(A, column, direction, 'MissingPlacement', value)'''


    "iscategorical":
        prefix: "iscategorical"
        body: '''${1:tf} = iscategorical(${1:A})'''
        description: '''tf = iscategorical(A)'''


    "reordercats":
        prefix: "reordercats"
        body: '''${1:B} = reordercats(${1:A}, ${2:neworder})'''
        description: '''B = reordercats(A, neworder)'''


    "setxor":
        prefix: "setxor"
        body: '''[${1:C}, ${2:ia}, ${3:ib}] = setxor(${1:A}, ${2:B}, ${3:'rows'}, ${4:setOrder})'''
        description: '''[C, ia, ib] = setxor(A, B, 'rows', setOrder)'''


    "setcats":
        prefix: "setcats"
        body: '''${1:B} = setcats(${1:A}, ${2:newcats})'''
        description: '''B = setcats(A, newcats)'''


    "uint64":
        prefix: "uint64"
        body: '''${1:y} = uint64(${1:x})'''
        description: '''y = uint64(x)'''


    "eq":
        prefix: "eq"
        body: '''${1:tf} = eq(${1:A}, ${2:B})'''
        description: '''tf = eq(A, B)'''


    "intersect":
        prefix: "intersect"
        body: '''[${1:C}, ${2:ia}, ${3:ib}] = intersect(${1:A}, ${2:B}, ${3:'rows'}, ${4:setOrder})'''
        description: '''[C, ia, ib] = intersect(A, B, 'rows', setOrder)'''


    "int16":
        prefix: "int16"
        body: '''${1:y} = int16(${1:x})'''
        description: '''y = int16(x)'''


    "max":
        prefix: "max"
        body: '''${1:C} = max(${1:A}, ${2:B}, ${3:nanflag})'''
        description: '''C = max(A, B, nanflag)'''


    "addcats":
        prefix: "addcats"
        body: '''${1:B} = addcats(${1:A}, ${2:newcats}, 'Before', ${3:value}, 'After', ${4:value})'''
        description: '''B = addcats(A, newcats, 'Before', value, 'After', value)'''


    "char":
        prefix: "char"
        body: '''${1:S} = char(${1:A})'''
        description: '''S = char(A)'''


    "cat":
        prefix: "cat"
        body: '''${1:C} = cat(${1:dim}, ${2:A}, ${3:B})'''
        description: '''C = cat(dim, A, B)'''


    "sort":
        prefix: "sort"
        body: '''[${1:B}, ${2:I}] = sort(${1:A}, ${2:dim}, ${3:direction}, 'MissingPlacement', ${4:value})'''
        description: '''[B, I] = sort(A, dim, direction, 'MissingPlacement', value)'''


    "sortrows":
        prefix: "sortrows"
        body: '''[${1:B}, ${2:Index}] = sortrows(${1:A}, ${2:column}, ${3:direction}, 'MissingPlacement', ${4:value})'''
        description: '''[B, Index] = sortrows(A, column, direction, 'MissingPlacement', value)'''


    "categories":
        prefix: "categories"
        body: '''${1:C} = categories(${1:A})'''
        description: '''C = categories(A)'''


    "topkrows":
        prefix: "topkrows"
        body: '''[${1:B}, ${2:Index}] = topkrows(${1:A}, ${2:k}, ${3:column}, ${4:direction})'''
        description: '''[B, Index] = topkrows(A, k, column, direction)'''


    "removecats":
        prefix: "removecats"
        body: '''${1:B} = removecats(${1:A}, ${2:oldcats})'''
        description: '''B = removecats(A, oldcats)'''


    "ismember":
        prefix: "ismember"
        body: '''[${1:Lia}, ${2:Locb}] = ismember(${1:A}, ${2:B}, ${3:'rows'})'''
        description: '''[Lia, Locb] = ismember(A, B, 'rows')'''


    "ctranspose":
        prefix: "ctranspose"
        body: '''${1:B} = ctranspose(${1:A})'''
        description: '''B = ctranspose(A)'''


    "mode":
        prefix: "mode"
        body: '''[${1:M}, ${2:F}, ${3:C}] = mode(${1:A}, ${2:dim})'''
        description: '''[M, F, C] = mode(A, dim)'''


    "vertcat":
        prefix: "vertcat"
        body: '''${1:C} = vertcat(${1:A})'''
        description: '''C = vertcat(A)'''


    "times":
        prefix: "times"
        body: '''${1:C} = times(${1:A}, ${2:B})'''
        description: '''C = times(A, B)'''


    "isprotected":
        prefix: "isprotected"
        body: '''${1:tf} = isprotected(${1:A})'''
        description: '''tf = isprotected(A)'''


    "isrow":
        prefix: "isrow"
        body: '''${1:TF} = isrow(${1:V})'''
        description: '''TF = isrow(V)'''


    "int64":
        prefix: "int64"
        body: '''${1:y} = int64(${1:x})'''
        description: '''y = int64(x)'''


    "isempty":
        prefix: "isempty"
        body: '''${1:TF} = isempty(${1:A})'''
        description: '''TF = isempty(A)'''


    "setdiff":
        prefix: "setdiff"
        body: '''[${1:C}, ${2:ia}] = setdiff(${1:A}, ${2:B}, ${3:'rows'}, ${4:setOrder})'''
        description: '''[C, ia] = setdiff(A, B, 'rows', setOrder)'''


    "histcounts":
        prefix: "histcounts"
        body: '''[${1:N}, ${2:categories}] = histcounts(${1:C}, ${2:Categories}, 'Normalization', ${3:value})'''
        description: '''[N, categories] = histcounts(C, Categories, 'Normalization', value)'''


    "cellstr":
        prefix: "cellstr"
        body: '''${1:C} = cellstr(${1:S})'''
        description: '''C = cellstr(S)'''


    "unique":
        prefix: "unique"
        body: '''[${1:C}, ${2:ia}, ${3:ic}] = unique(${1:A}, ${2:'rows'}, ${3:setOrder})'''
        description: '''[C, ia, ic] = unique(A, 'rows', setOrder)'''


    "isvector":
        prefix: "isvector"
        body: '''${1:TF} = isvector(${1:A})'''
        description: '''TF = isvector(A)'''


    "single":
        prefix: "single"
        body: '''${1:y} = single(${1:x})'''
        description: '''y = single(x)'''


    "le":
        prefix: "le"
        body: '''${1:tf} = le(${1:A}, ${2:B})'''
        description: '''tf = le(A, B)'''


    "median":
        prefix: "median"
        body: '''${1:M} = median(${1:A}, ${2:dim}, ${3:nanflag})'''
        description: '''M = median(A, dim, nanflag)'''


    "horzcat":
        prefix: "horzcat"
        body: '''${1:C} = horzcat(${1:A})'''
        description: '''C = horzcat(A)'''


    "isscalar":
        prefix: "isscalar"
        body: '''${1:TF} = isscalar(${1:A})'''
        description: '''TF = isscalar(A)'''


    "mergecats":
        prefix: "mergecats"
        body: '''${1:B} = mergecats(${1:A}, ${2:oldcats}, ${3:newcats})'''
        description: '''B = mergecats(A, oldcats, newcats)'''


    "string":
        prefix: "string"
        body: '''${1:str} = string(${1:A})'''
        description: '''str = string(A)'''


    "isequaln":
        prefix: "isequaln"
        body: '''${1:tf} = isequaln(${1:A}, ${2:B})'''
        description: '''tf = isequaln(A, B)'''


    "transpose":
        prefix: "transpose"
        body: '''${1:B} = transpose(${1:A})'''
        description: '''B = transpose(A)'''


    "numel":
        prefix: "numel"
        body: '''${1:n} = numel(${1:A})'''
        description: '''n = numel(A)'''


    "lt":
        prefix: "lt"
        body: '''${1:tf} = lt(${1:A}, ${2:B})'''
        description: '''tf = lt(A, B)'''


    "int8":
        prefix: "int8"
        body: '''${1:y} = int8(${1:x})'''
        description: '''y = int8(x)'''


    "min":
        prefix: "min"
        body: '''${1:C} = min(${1:A}, ${2:B}, ${3:nanflag})'''
        description: '''C = min(A, B, nanflag)'''


    "mink":
        prefix: "mink"
        body: '''[${1:B}, ${2:I}] = mink(${1:A}, ${2:k}, ${3:dim})'''
        description: '''[B, I] = mink(A, k, dim)'''


    "int32":
        prefix: "int32"
        body: '''${1:y} = int32(${1:x})'''
        description: '''y = int32(x)'''


    "isordinal":
        prefix: "isordinal"
        body: '''${1:tf} = isordinal(${1:A})'''
        description: '''tf = isordinal(A)'''


    "iscolumn":
        prefix: "iscolumn"
        body: '''${1:TF} = iscolumn(${1:V})'''
        description: '''TF = iscolumn(V)'''


    "summary":
        prefix: "summary"
        body: '''summary(${1:A}, ${2:dim})'''
        description: '''summary(A, dim)'''


    "iscategory":
        prefix: "iscategory"
        body: '''${1:tf} = iscategory(${1:A}, ${2:catnames})'''
        description: '''tf = iscategory(A, catnames)'''


    "isequal":
        prefix: "isequal"
        body: '''${1:tf} = isequal(${1:A}, ${2:B})'''
        description: '''tf = isequal(A, B)'''


    "issorted":
        prefix: "issorted"
        body: '''${1:TF} = issorted(${1:A}, ${2:dim}, ${3:direction}, 'MissingPlacement', ${4:value})'''
        description: '''TF = issorted(A, dim, direction, 'MissingPlacement', value)'''


    "categorical":
        prefix: "categorical"
        body: '''${1:C} = categorical(${1:A}, ${2:valueset}, ${3:catnames}, 'Protected', ${4:value}, 'Ordinal', ${5:value})'''
        description: '''C = categorical(A, valueset, catnames, 'Protected', value, 'Ordinal', value)'''


    "gt":
        prefix: "gt"
        body: '''${1:tf} = gt(${1:A}, ${2:B})'''
        description: '''tf = gt(A, B)'''


    "ne":
        prefix: "ne"
        body: '''${1:tf} = ne(${1:A}, ${2:B})'''
        description: '''tf = ne(A, B)'''


    "double":
        prefix: "double"
        body: '''${1:y} = double(${1:x})'''
        description: '''y = double(x)'''


    "isundefined":
        prefix: "isundefined"
        body: '''${1:tf} = isundefined(${1:A})'''
        description: '''tf = isundefined(A)'''


    "permute":
        prefix: "permute"
        body: '''${1:B} = permute(${1:A}, ${2:order})'''
        description: '''B = permute(A, order)'''


    "renamecats":
        prefix: "renamecats"
        body: '''${1:B} = renamecats(${1:A}, ${2:oldnames}, ${3:newnames})'''
        description: '''B = renamecats(A, oldnames, newnames)'''

