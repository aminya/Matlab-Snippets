# MATLAB snippets generated using https://github.com/aminya/Matlab-Snippets
'.source.matlab, source.m':

    "settlingtime":
        prefix: "settlingtime"
        body: '''[${1:S}, ${2:SLEV}, ${3:SINST}] = settlingtime(${1:X}, ${2:T}, ${3:D}, 'MidPercentReferenceLevel', ${4:value}, 'StateLevels', ${5:value}, 'Tolerance', ${6:value})'''
        description: '''[${1:S}, ${2:SLEV}, ${3:SINST}] = settlingtime(${1:X}, ${2:T}, ${3:D}, 'MidPercentReferenceLevel', ${4:value}, 'StateLevels', ${5:value}, 'Tolerance', ${6:value})'''


    "rssq":
        prefix: "rssq"
        body: '''${1:Y} = rssq(${1:X}, ${2:optional_DIM})'''
        description: '''${1:Y} = rssq(${1:X}, ${2:optional_DIM})'''


    "bilinear":
        prefix: "bilinear"
        body: '''[${1:Ad}, ${2:Bd}, ${3:Cd}, ${4:Dd}] = bilinear(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:fs}, ${6:optional_fp})'''
        description: '''[${1:Ad}, ${2:Bd}, ${3:Cd}, ${4:Dd}] = bilinear(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:fs}, ${6:optional_fp})'''


    "residuez":
        prefix: "residuez"
        body: '''[${1:b}, ${2:a}] = residuez(${1:r}, ${2:p}, ${3:k})'''
        description: '''[${1:b}, ${2:a}] = residuez(${1:r}, ${2:p}, ${3:k})'''


    "sgolay":
        prefix: "sgolay"
        body: '''[${1:b}, ${2:g}] = sgolay(${1:order}, ${2:framelen}, ${3:optional_weights})'''
        description: '''[${1:b}, ${2:g}] = sgolay(${1:order}, ${2:framelen}, ${3:optional_weights})'''


    "modalfrf":
        prefix: "modalfrf"
        body: '''[${1:frf}, ${2:f}] = modalfrf(${1:sys}, ${2:f}, 'Sensor', ${3:value})'''
        description: '''[${1:frf}, ${2:f}] = modalfrf(${1:sys}, ${2:f}, 'Sensor', ${3:value})'''


    "db2mag":
        prefix: "db2mag"
        body: '''${1:y} = db2mag(${1:ydb})'''
        description: '''${1:y} = db2mag(${1:ydb})'''


    "meanfreq":
        prefix: "meanfreq"
        body: '''[${1:freq}, ${2:power}] = meanfreq(${1:sxx}, ${2:f}, ${3:rbw}, ${4:optional_freqrange})'''
        description: '''[${1:freq}, ${2:power}] = meanfreq(${1:sxx}, ${2:f}, ${3:rbw}, ${4:optional_freqrange})'''


    "rcosdesign":
        prefix: "rcosdesign"
        body: '''${1:b} = rcosdesign(${1:beta}, ${2:span}, ${3:sps}, ${4:optional_shape})'''
        description: '''${1:b} = rcosdesign(${1:beta}, ${2:span}, ${3:sps}, ${4:optional_shape})'''


    "bandstop":
        prefix: "bandstop"
        body: '''[${1:y}, ${2:d}] = bandstop(${1:xt}, ${2:fpass}, 'ImpulseResponse', ${3:value}, 'Steepness', ${4:value}, 'StopbandAttenuation', ${5:value})'''
        description: '''[${1:y}, ${2:d}] = bandstop(${1:xt}, ${2:fpass}, 'ImpulseResponse', ${3:value}, 'Steepness', ${4:value}, 'StopbandAttenuation', ${5:value})'''


    "cheby2":
        prefix: "cheby2"
        body: '''[${1:A}, ${2:B}, ${3:C}, ${4:D}] = cheby2(${1:n}, ${2:Rs}, ${3:Ws}, ${4:ftype}, ${5:optional_'s'})'''
        description: '''[${1:A}, ${2:B}, ${3:C}, ${4:D}] = cheby2(${1:n}, ${2:Rs}, ${3:Ws}, ${4:ftype}, ${5:optional_'s'})'''


    "yulewalk":
        prefix: "yulewalk"
        body: '''[${1:b}, ${2:a}] = yulewalk(${1:n}, ${2:f}, ${3:m})'''
        description: '''[${1:b}, ${2:a}] = yulewalk(${1:n}, ${2:f}, ${3:m})'''


    "gmonopuls":
        prefix: "gmonopuls"
        body: '''${1:tc} = gmonopuls(${1:'cutoff'}, ${2:fc})'''
        description: '''${1:tc} = gmonopuls(${1:'cutoff'}, ${2:fc})'''


    "nuttallwin":
        prefix: "nuttallwin"
        body: '''${1:w} = nuttallwin(${1:N}, ${2:optional_SFLAG})'''
        description: '''${1:w} = nuttallwin(${1:N}, ${2:optional_SFLAG})'''


    "hamming":
        prefix: "hamming"
        body: '''${1:w} = hamming(${1:L}, ${2:optional_sflag})'''
        description: '''${1:w} = hamming(${1:L}, ${2:optional_sflag})'''


    "cceps":
        prefix: "cceps"
        body: '''[${1:xhat}, ${2:nd}, ${3:xhat1}] = cceps(${1:x}, ${2:optional_n})'''
        description: '''[${1:xhat}, ${2:nd}, ${3:xhat1}] = cceps(${1:x}, ${2:optional_n})'''


    "dtw":
        prefix: "dtw"
        body: '''[${1:dist}, ${2:ix}, ${3:iy}] = dtw(${1:x}, ${2:y}, ${3:optional_maxsamp}, ${4:optional_metric})'''
        description: '''[${1:dist}, ${2:ix}, ${3:iy}] = dtw(${1:x}, ${2:y}, ${3:optional_maxsamp}, ${4:optional_metric})'''


    "cpsd":
        prefix: "cpsd"
        body: '''[${1:pxy}, ${2:f}] = cpsd(${1:x}, ${2:y}, ${3:window}, ${4:noverlap}, ${5:f}, ${6:fs}, ${7:optional_'mimo'}, ${8:optional_freqrange})'''
        description: '''[${1:pxy}, ${2:f}] = cpsd(${1:x}, ${2:y}, ${3:window}, ${4:noverlap}, ${5:f}, ${6:fs}, ${7:optional_'mimo'}, ${8:optional_freqrange})'''


    "rainflow":
        prefix: "rainflow"
        body: '''[${1:c}, ${2:rm}, ${3:rmr}, ${4:rmm}, ${5:idx}] = rainflow(${1:xt}, ${2:optional_'ext'})'''
        description: '''[${1:c}, ${2:rm}, ${3:rmr}, ${4:rmm}, ${5:idx}] = rainflow(${1:xt}, ${2:optional_'ext'})'''


    "rc2lar":
        prefix: "rc2lar"
        body: '''${1:g} = rc2lar(${1:k})'''
        description: '''${1:g} = rc2lar(${1:k})'''


    "ifsst":
        prefix: "ifsst"
        body: '''${1:x} = ifsst(${1:s}, ${2:window}, ${3:iridge}, ${4:'NumFrequencyBins'}, ${5:nbins})'''
        description: '''${1:x} = ifsst(${1:s}, ${2:window}, ${3:iridge}, ${4:'NumFrequencyBins'}, ${5:nbins})'''


    "enbw":
        prefix: "enbw"
        body: '''${1:bw} = enbw(${1:window}, ${2:optional_fs})'''
        description: '''${1:bw} = enbw(${1:window}, ${2:optional_fs})'''


    "eqtflength":
        prefix: "eqtflength"
        body: '''[${1:b}, ${2:a}, ${3:n}, ${4:m}] = eqtflength(${1:num}, ${2:den})'''
        description: '''[${1:b}, ${2:a}, ${3:n}, ${4:m}] = eqtflength(${1:num}, ${2:den})'''


    "statelevels":
        prefix: "statelevels"
        body: '''[${1:LEVELS}, ${2:HISTOGRAM}, ${3:BINLEVELS}] = statelevels(${1:X}, ${2:NBINS}, ${3:optional_METHOD})'''
        description: '''[${1:LEVELS}, ${2:HISTOGRAM}, ${3:BINLEVELS}] = statelevels(${1:X}, ${2:NBINS}, ${3:optional_METHOD})'''


    "peak2rms":
        prefix: "peak2rms"
        body: '''${1:Y} = peak2rms(${1:X}, ${2:optional_DIM})'''
        description: '''${1:Y} = peak2rms(${1:X}, ${2:optional_DIM})'''


    "filternorm":
        prefix: "filternorm"
        body: '''${1:L} = filternorm(${1:b}, ${2:a}, ${3:2}, ${4:optional_tol})'''
        description: '''${1:L} = filternorm(${1:b}, ${2:a}, ${3:2}, ${4:optional_tol})'''


    "lar2rc":
        prefix: "lar2rc"
        body: '''${1:k} = lar2rc(${1:g})'''
        description: '''${1:k} = lar2rc(${1:g})'''


    "udecode":
        prefix: "udecode"
        body: '''${1:y} = udecode(${1:u}, ${2:n}, ${3:v}, ${4:optional_'SaturateMode'})'''
        description: '''${1:y} = udecode(${1:u}, ${2:n}, ${3:v}, ${4:optional_'SaturateMode'})'''


    "convmtx":
        prefix: "convmtx"
        body: '''${1:A} = convmtx(${1:h}, ${2:n})'''
        description: '''${1:A} = convmtx(${1:h}, ${2:n})'''


    "orderspectrum":
        prefix: "orderspectrum"
        body: '''[${1:spec}, ${2:order}] = orderspectrum(${1:map}, ${2:order})'''
        description: '''[${1:spec}, ${2:order}] = orderspectrum(${1:map}, ${2:order})'''


    "ss2sos":
        prefix: "ss2sos"
        body: '''[${1:sos}, ${2:g}] = ss2sos(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:iu}, ${6:'order'}, ${7:optional_'scale'})'''
        description: '''[${1:sos}, ${2:g}] = ss2sos(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:iu}, ${6:'order'}, ${7:optional_'scale'})'''


    "dct":
        prefix: "dct"
        body: '''${1:y} = dct(${1:x}, ${2:n}, ${3:dim}, ${4:optional_'Type'}, ${5:optional_dcttype})'''
        description: '''${1:y} = dct(${1:x}, ${2:n}, ${3:dim}, ${4:optional_'Type'}, ${5:optional_dcttype})'''


    "filtord":
        prefix: "filtord"
        body: '''${1:n} = filtord(${1:d})'''
        description: '''${1:n} = filtord(${1:d})'''


    "zp2sos":
        prefix: "zp2sos"
        body: '''[${1:sos}, ${2:g}] = zp2sos(${1:z}, ${2:p}, ${3:k}, ${4:'order'}, ${5:'scale'}, ${6:optional_zeroflag})'''
        description: '''[${1:sos}, ${2:g}] = zp2sos(${1:z}, ${2:p}, ${3:k}, ${4:'order'}, ${5:'scale'}, ${6:optional_zeroflag})'''


    "poly2rc":
        prefix: "poly2rc"
        body: '''[${1:k}, ${2:r0}] = poly2rc(${1:a}, ${2:optional_efinal})'''
        description: '''[${1:k}, ${2:r0}] = poly2rc(${1:a}, ${2:optional_efinal})'''


    "lowpass":
        prefix: "lowpass"
        body: '''[${1:y}, ${2:d}] = lowpass(${1:xt}, ${2:fpass}, 'ImpulseResponse', ${3:value}, 'Steepness', ${4:value}, 'StopbandAttenuation', ${5:value})'''
        description: '''[${1:y}, ${2:d}] = lowpass(${1:xt}, ${2:fpass}, 'ImpulseResponse', ${3:value}, 'Steepness', ${4:value}, 'StopbandAttenuation', ${5:value})'''


    "poctave":
        prefix: "poctave"
        body: '''[${1:p}, ${2:cf}] = poctave(${1:pxx}, ${2:fs}, ${3:f}, ${4:'psd'}, 'BandsPerOctave', ${5:value}, 'FilterOrder', ${6:value}, 'FrequencyLimits', ${7:value}, 'Weighting', ${8:value})'''
        description: '''[${1:p}, ${2:cf}] = poctave(${1:pxx}, ${2:fs}, ${3:f}, ${4:'psd'}, 'BandsPerOctave', ${5:value}, 'FilterOrder', ${6:value}, 'FrequencyLimits', ${7:value}, 'Weighting', ${8:value})'''


    "fir2":
        prefix: "fir2"
        body: '''${1:b} = fir2(${1:n}, ${2:f}, ${3:m}, ${4:npt}, ${5:lap}, ${6:optional_window})'''
        description: '''${1:b} = fir2(${1:n}, ${2:f}, ${3:m}, ${4:npt}, ${5:lap}, ${6:optional_window})'''


    "parzenwin":
        prefix: "parzenwin"
        body: '''${1:w} = parzenwin(${1:L})'''
        description: '''${1:w} = parzenwin(${1:L})'''


    "rectpuls":
        prefix: "rectpuls"
        body: '''${1:y} = rectpuls(${1:t}, ${2:optional_w})'''
        description: '''${1:y} = rectpuls(${1:t}, ${2:optional_w})'''


    "rc2is":
        prefix: "rc2is"
        body: '''${1:isin} = rc2is(${1:k})'''
        description: '''${1:isin} = rc2is(${1:k})'''


    "tachorpm":
        prefix: "tachorpm"
        body: '''[${1:rpm}, ${2:t}, ${3:tp}] = tachorpm(${1:x}, ${2:fs}, 'PulsesPerRev', ${3:value}, 'StateLevels', ${4:value}, 'OutputFs', ${5:value}, 'FitType', ${6:value}, 'FitPoints', ${7:value})'''
        description: '''[${1:rpm}, ${2:t}, ${3:tp}] = tachorpm(${1:x}, ${2:fs}, 'PulsesPerRev', ${3:value}, 'StateLevels', ${4:value}, 'OutputFs', ${5:value}, 'FitType', ${6:value}, 'FitPoints', ${7:value})'''


    "single":
        prefix: "single"
        body: '''${1:f2} = single(${1:f1})'''
        description: '''${1:f2} = single(${1:f1})'''


    "pmtm":
        prefix: "pmtm"
        body: '''[${1:pxx}, ${2:w}, ${3:pxxc}] = pmtm(${1:x}, ${2:dpss_params}, ${3:optional_method}, ${4:'DropLastTaper'}, ${5:optional_dropflag}, ${6:optional_freqrange}, ${7:'ConfidenceLevel'}, ${8:optional_probability})'''
        description: '''[${1:pxx}, ${2:w}, ${3:pxxc}] = pmtm(${1:x}, ${2:dpss_params}, ${3:optional_method}, ${4:'DropLastTaper'}, ${5:optional_dropflag}, ${6:optional_freqrange}, ${7:'ConfidenceLevel'}, ${8:optional_probability})'''


    "tsa":
        prefix: "tsa"
        body: '''[${1:ta}, ${2:t}, ${3:p}, ${4:rpm}] = tsa(${1:xt}, ${2:tp}, 'Method', ${3:value}, 'NumRotations', ${4:value}, 'PulsesPerRotation', ${5:value}, 'ResampleFactor', ${6:value})'''
        description: '''[${1:ta}, ${2:t}, ${3:p}, ${4:rpm}] = tsa(${1:xt}, ${2:tp}, 'Method', ${3:value}, 'NumRotations', ${4:value}, 'PulsesPerRotation', ${5:value}, 'ResampleFactor', ${6:value})'''


    "risetime":
        prefix: "risetime"
        body: '''[${1:R}, ${2:LT}, ${3:UT}, ${4:LL}, ${5:UL}] = risetime(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'StateLevels', ${4:value}, 'Tolerance', ${5:value})'''
        description: '''[${1:R}, ${2:LT}, ${3:UT}, ${4:LL}, ${5:UL}] = risetime(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'StateLevels', ${4:value}, 'Tolerance', ${5:value})'''


    "ac2rc":
        prefix: "ac2rc"
        body: '''[${1:k}, ${2:r0}] = ac2rc(${1:r})'''
        description: '''[${1:k}, ${2:r0}] = ac2rc(${1:r})'''


    "bandpower":
        prefix: "bandpower"
        body: '''${1:p} = bandpower(${1:pxx}, ${2:f}, ${3:optional_freqrange}, ${4:'psd'})'''
        description: '''${1:p} = bandpower(${1:pxx}, ${2:f}, ${3:optional_freqrange}, ${4:'psd'})'''


    "shiftdata":
        prefix: "shiftdata"
        body: '''[${1:x}, ${2:perm}, ${3:nshifts}] = shiftdata(${1:x}, ${2:dim})'''
        description: '''[${1:x}, ${2:perm}, ${3:nshifts}] = shiftdata(${1:x}, ${2:dim})'''


    "sos2ss":
        prefix: "sos2ss"
        body: '''[${1:A}, ${2:B}, ${3:C}, ${4:D}] = sos2ss(${1:sos}, ${2:optional_g})'''
        description: '''[${1:A}, ${2:B}, ${3:C}, ${4:D}] = sos2ss(${1:sos}, ${2:optional_g})'''


    "isstable":
        prefix: "isstable"
        body: '''${1:flag} = isstable(${1:d})'''
        description: '''${1:flag} = isstable(${1:d})'''


    "prony":
        prefix: "prony"
        body: '''[${1:Num}, ${2:Den}] = prony(${1:impulse_resp}, ${2:num_ord}, ${3:denom_ord})'''
        description: '''[${1:Num}, ${2:Den}] = prony(${1:impulse_resp}, ${2:num_ord}, ${3:denom_ord})'''


    "strips":
        prefix: "strips"
        body: '''strips(${1:x}, ${2:sd}, ${3:fs}, ${4:scale})'''
        description: '''strips(${1:x}, ${2:sd}, ${3:fs}, ${4:scale})'''


    "gaussdesign":
        prefix: "gaussdesign"
        body: '''${1:h} = gaussdesign(${1:bt}, ${2:span}, ${3:sps})'''
        description: '''${1:h} = gaussdesign(${1:bt}, ${2:span}, ${3:sps})'''


    "thd":
        prefix: "thd"
        body: '''[${1:r}, ${2:harmpow}, ${3:harmfreq}] = thd(${1:sxx}, ${2:f}, ${3:rbw}, ${4:optional_n}, ${5:'power'}, ${6:optional_'aliased'})'''
        description: '''[${1:r}, ${2:harmpow}, ${3:harmfreq}] = thd(${1:sxx}, ${2:f}, ${3:rbw}, ${4:optional_n}, ${5:'power'}, ${6:optional_'aliased'})'''


    "phasedelay":
        prefix: "phasedelay"
        body: '''${1:phi} = phasedelay(${1:d}, ${2:optional_f}, ${3:optional_fs})'''
        description: '''${1:phi} = phasedelay(${1:d}, ${2:optional_f}, ${3:optional_fs})'''


    "poly2lsf":
        prefix: "poly2lsf"
        body: '''${1:lsf} = poly2lsf(${1:a})'''
        description: '''${1:lsf} = poly2lsf(${1:a})'''


    "aryule":
        prefix: "aryule"
        body: '''[${1:a}, ${2:e}, ${3:rc}] = aryule(${1:x}, ${2:p})'''
        description: '''[${1:a}, ${2:e}, ${3:rc}] = aryule(${1:x}, ${2:p})'''


    "icceps":
        prefix: "icceps"
        body: '''${1:x} = icceps(${1:xhat}, ${2:optional_nd})'''
        description: '''${1:x} = icceps(${1:xhat}, ${2:optional_nd})'''


    "marcumq":
        prefix: "marcumq"
        body: '''${1:Q} = marcumq(${1:a}, ${2:b}, ${3:optional_m})'''
        description: '''${1:Q} = marcumq(${1:a}, ${2:b}, ${3:optional_m})'''


    "polystab":
        prefix: "polystab"
        body: '''${1:b} = polystab(${1:a})'''
        description: '''${1:b} = polystab(${1:a})'''


    "medfreq":
        prefix: "medfreq"
        body: '''[${1:freq}, ${2:power}] = medfreq(${1:sxx}, ${2:f}, ${3:rbw}, ${4:optional_freqrange})'''
        description: '''[${1:freq}, ${2:power}] = medfreq(${1:sxx}, ${2:f}, ${3:rbw}, ${4:optional_freqrange})'''


    "stepz":
        prefix: "stepz"
        body: '''[${1:h}, ${2:t}] = stepz(${1:d}, ${2:n}, ${3:optional_fs})'''
        description: '''[${1:h}, ${2:t}] = stepz(${1:d}, ${2:n}, ${3:optional_fs})'''


    "pburg":
        prefix: "pburg"
        body: '''[${1:pxx}, ${2:f}, ${3:pxxc}] = pburg(${1:x}, ${2:order}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:'ConfidenceLevel'}, ${7:optional_probability})'''
        description: '''[${1:pxx}, ${2:f}, ${3:pxxc}] = pburg(${1:x}, ${2:order}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:'ConfidenceLevel'}, ${7:optional_probability})'''


    "fircls1":
        prefix: "fircls1"
        body: '''${1:b} = fircls1(${1:n}, ${2:wo}, ${3:dp}, ${4:ds}, ${5:wp}, ${6:ws}, ${7:k}, ${8:optional_'high'}, ${9:optional_'design_flag'})'''
        description: '''${1:b} = fircls1(${1:n}, ${2:wo}, ${3:dp}, ${4:ds}, ${5:wp}, ${6:ws}, ${7:k}, ${8:optional_'high'}, ${9:optional_'design_flag'})'''


    "mscohere":
        prefix: "mscohere"
        body: '''[${1:cxy}, ${2:f}] = mscohere(${1:x}, ${2:y}, ${3:window}, ${4:noverlap}, ${5:f}, ${6:fs}, ${7:optional_'mimo'}, ${8:optional_freqrange})'''
        description: '''[${1:cxy}, ${2:f}] = mscohere(${1:x}, ${2:y}, ${3:window}, ${4:noverlap}, ${5:f}, ${6:fs}, ${7:optional_'mimo'}, ${8:optional_freqrange})'''


    "sawtooth":
        prefix: "sawtooth"
        body: '''${1:x} = sawtooth(${1:t}, ${2:optional_xmax})'''
        description: '''${1:x} = sawtooth(${1:t}, ${2:optional_xmax})'''


    "hampel":
        prefix: "hampel"
        body: '''[${1:y}, ${2:j}, ${3:xmedian}, ${4:xsigma}] = hampel(${1:x}, ${2:k}, ${3:optional_nsigma})'''
        description: '''[${1:y}, ${2:j}, ${3:xmedian}, ${4:xsigma}] = hampel(${1:x}, ${2:k}, ${3:optional_nsigma})'''


    "db2pow":
        prefix: "db2pow"
        body: '''${1:y} = db2pow(${1:ydb})'''
        description: '''${1:y} = db2pow(${1:ydb})'''


    "alignsignals":
        prefix: "alignsignals"
        body: '''[${1:Xa}, ${2:Ya}, ${3:D}] = alignsignals(${1:X}, ${2:Y}, ${3:maxlag}, ${4:optional_'truncate'})'''
        description: '''[${1:Xa}, ${2:Ya}, ${3:D}] = alignsignals(${1:X}, ${2:Y}, ${3:maxlag}, ${4:optional_'truncate'})'''


    "fftfilt":
        prefix: "fftfilt"
        body: '''${1:y} = fftfilt(${1:gpuArrayb}, ${2:gpuArrayX}, ${3:optional_n})'''
        description: '''${1:y} = fftfilt(${1:gpuArrayb}, ${2:gpuArrayX}, ${3:optional_n})'''


    "findchangepts":
        prefix: "findchangepts"
        body: '''[${1:ipt}, ${2:residual}] = findchangepts(${1:x}, 'MaxNumChanges', ${2:value}, 'Statistic', ${3:value}, 'MinDistance', ${4:value}, 'MinThreshold', ${5:value})'''
        description: '''[${1:ipt}, ${2:residual}] = findchangepts(${1:x}, 'MaxNumChanges', ${2:value}, 'Statistic', ${3:value}, 'MinDistance', ${4:value}, 'MinThreshold', ${5:value})'''


    "besselap":
        prefix: "besselap"
        body: '''[${1:z}, ${2:p}, ${3:k}] = besselap(${1:n})'''
        description: '''[${1:z}, ${2:p}, ${3:k}] = besselap(${1:n})'''


    "overshoot":
        prefix: "overshoot"
        body: '''[${1:OS}, ${2:OSLEV}, ${3:OSINST}] = overshoot(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'Region', ${4:value}, 'SeekFactor', ${5:value}, 'StateLevels', ${6:value}, 'Tolerance', ${7:value})'''
        description: '''[${1:OS}, ${2:OSLEV}, ${3:OSINST}] = overshoot(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'Region', ${4:value}, 'SeekFactor', ${5:value}, 'StateLevels', ${6:value}, 'Tolerance', ${7:value})'''


    "square":
        prefix: "square"
        body: '''${1:x} = square(${1:t}, ${2:optional_duty})'''
        description: '''${1:x} = square(${1:t}, ${2:optional_duty})'''


    "pyulear":
        prefix: "pyulear"
        body: '''[${1:pxx}, ${2:f}, ${3:pxxc}] = pyulear(${1:x}, ${2:order}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:'ConfidenceLevel'}, ${7:optional_probability})'''
        description: '''[${1:pxx}, ${2:f}, ${3:pxxc}] = pyulear(${1:x}, ${2:order}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:'ConfidenceLevel'}, ${7:optional_probability})'''


    "triang":
        prefix: "triang"
        body: '''${1:w} = triang(${1:L})'''
        description: '''${1:w} = triang(${1:L})'''


    "hann":
        prefix: "hann"
        body: '''${1:w} = hann(${1:L}, ${2:optional_sflag})'''
        description: '''${1:w} = hann(${1:L}, ${2:optional_sflag})'''


    "kurtogram":
        prefix: "kurtogram"
        body: '''[${1:kgram}, ${2:f}, ${3:w}, ${4:fc}, ${5:wc}, ${6:bw}] = kurtogram(${1:xt}, ${2:optional_level})'''
        description: '''[${1:kgram}, ${2:f}, ${3:w}, ${4:fc}, ${5:wc}, ${6:bw}] = kurtogram(${1:xt}, ${2:optional_level})'''


    "falltime":
        prefix: "falltime"
        body: '''[${1:F}, ${2:LT}, ${3:UT}, ${4:LL}, ${5:UL}] = falltime(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'StateLevels', ${4:value}, 'Tolerance', ${5:value})'''
        description: '''[${1:F}, ${2:LT}, ${3:UT}, ${4:LL}, ${5:UL}] = falltime(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'StateLevels', ${4:value}, 'Tolerance', ${5:value})'''


    "findsignal":
        prefix: "findsignal"
        body: '''[${1:istart}, ${2:istop}, ${3:dist}] = findsignal(${1:data}, ${2:signal}, 'Normalization', ${3:value}, 'NormalizationLength', ${4:value}, 'MaxDistance', ${5:value}, 'MaxNumSegments', ${6:value}, 'TimeAlignment', ${7:value}, 'EDRTolerance', ${8:value}, 'Metric', ${9:value}, 'Annotate', ${10:value})'''
        description: '''[${1:istart}, ${2:istop}, ${3:dist}] = findsignal(${1:data}, ${2:signal}, 'Normalization', ${3:value}, 'NormalizationLength', ${4:value}, 'MaxDistance', ${5:value}, 'MaxNumSegments', ${6:value}, 'TimeAlignment', ${7:value}, 'EDRTolerance', ${8:value}, 'Metric', ${9:value}, 'Annotate', ${10:value})'''


    "upfirdn":
        prefix: "upfirdn"
        body: '''${1:yout} = upfirdn(${1:xin}, ${2:h}, ${3:p}, ${4:optional_q})'''
        description: '''${1:yout} = upfirdn(${1:xin}, ${2:h}, ${3:p}, ${4:optional_q})'''


    "fillgaps":
        prefix: "fillgaps"
        body: '''${1:y} = fillgaps(${1:x}, ${2:maxlen}, ${3:optional_order})'''
        description: '''${1:y} = fillgaps(${1:x}, ${2:maxlen}, ${3:optional_order})'''


    "freqz":
        prefix: "freqz"
        body: '''${1:h} = freqz(${1:d}, ${2:f}, ${3:fs})'''
        description: '''${1:h} = freqz(${1:d}, ${2:f}, ${3:fs})'''


    "fsst":
        prefix: "fsst"
        body: '''[${1:s}, ${2:f}, ${3:t}] = fsst(${1:x}, ${2:ts}, ${3:optional_window}, ${4:optional_freqloc})'''
        description: '''[${1:s}, ${2:f}, ${3:t}] = fsst(${1:x}, ${2:ts}, ${3:optional_window}, ${4:optional_freqloc})'''


    "gausswin":
        prefix: "gausswin"
        body: '''${1:w} = gausswin(${1:N}, ${2:optional_Alpha})'''
        description: '''${1:w} = gausswin(${1:N}, ${2:optional_Alpha})'''


    "fir1":
        prefix: "fir1"
        body: '''${1:b} = fir1(${1:n}, ${2:Wn}, ${3:optional_ftype}, ${4:optional_window}, ${5:optional_scaleopt})'''
        description: '''${1:b} = fir1(${1:n}, ${2:Wn}, ${3:optional_ftype}, ${4:optional_window}, ${5:optional_scaleopt})'''


    "pspectrum":
        prefix: "pspectrum"
        body: '''[${1:p}, ${2:f}, ${3:pwr}] = pspectrum(${1:x}, ${2:optional_t}, ${3:optional_type}, 'FrequencyLimits', ${4:value}, 'FrequencyResolution', ${5:value}, 'Leakage', ${6:value}, 'MinThreshold', ${7:value}, 'NumPowerBins', ${8:value}, 'OverlapPercent', ${9:value}, 'Reassign', ${10:value}, 'TimeResolution', ${11:value})'''
        description: '''[${1:p}, ${2:f}, ${3:pwr}] = pspectrum(${1:x}, ${2:optional_t}, ${3:optional_type}, 'FrequencyLimits', ${4:value}, 'FrequencyResolution', ${5:value}, 'Leakage', ${6:value}, 'MinThreshold', ${7:value}, 'NumPowerBins', ${8:value}, 'OverlapPercent', ${9:value}, 'Reassign', ${10:value}, 'TimeResolution', ${11:value})'''


    "butter":
        prefix: "butter"
        body: '''[${1:A}, ${2:B}, ${3:C}, ${4:D}] = butter(${1:n}, ${2:Wn}, ${3:ftype}, ${4:optional_'s'})'''
        description: '''[${1:A}, ${2:B}, ${3:C}, ${4:D}] = butter(${1:n}, ${2:Wn}, ${3:ftype}, ${4:optional_'s'})'''


    "dpssdir":
        prefix: "dpssdir"
        body: '''${1:index} = dpssdir(${1:nw}, ${2:'nw'})'''
        description: '''${1:index} = dpssdir(${1:nw}, ${2:'nw'})'''


    "tf2latc":
        prefix: "tf2latc"
        body: '''${1:k} = tf2latc(${1:b}, ${2:'phase'})'''
        description: '''${1:k} = tf2latc(${1:b}, ${2:'phase'})'''


    "blackmanharris":
        prefix: "blackmanharris"
        body: '''${1:w} = blackmanharris(${1:N}, ${2:optional_SFLAG})'''
        description: '''${1:w} = blackmanharris(${1:N}, ${2:optional_SFLAG})'''


    "flattopwin":
        prefix: "flattopwin"
        body: '''${1:w} = flattopwin(${1:L}, ${2:optional_sflag})'''
        description: '''${1:w} = flattopwin(${1:L}, ${2:optional_sflag})'''


    "isdouble":
        prefix: "isdouble"
        body: '''${1:flag} = isdouble(${1:d})'''
        description: '''${1:flag} = isdouble(${1:d})'''


    "pulseperiod":
        prefix: "pulseperiod"
        body: '''[${1:P}, ${2:INITCROSS}, ${3:FINALCROSS}, ${4:NEXTCROSS}, ${5:MIDLEV}] = pulseperiod(${1:X}, ${2:optional_T}, 'MidPercentReferenceLevel', ${3:value}, 'Polarity', ${4:value}, 'StateLevels', ${5:value}, 'Tolerance', ${6:value})'''
        description: '''[${1:P}, ${2:INITCROSS}, ${3:FINALCROSS}, ${4:NEXTCROSS}, ${5:MIDLEV}] = pulseperiod(${1:X}, ${2:optional_T}, 'MidPercentReferenceLevel', ${3:value}, 'Polarity', ${4:value}, 'StateLevels', ${5:value}, 'Tolerance', ${6:value})'''


    "decimate":
        prefix: "decimate"
        body: '''${1:y} = decimate(${1:x}, ${2:r}, ${3:n}, ${4:optional_'fir'})'''
        description: '''${1:y} = decimate(${1:x}, ${2:r}, ${3:n}, ${4:optional_'fir'})'''


    "chebwin":
        prefix: "chebwin"
        body: '''${1:w} = chebwin(${1:L}, ${2:optional_r})'''
        description: '''${1:w} = chebwin(${1:L}, ${2:optional_r})'''


    "ellipord":
        prefix: "ellipord"
        body: '''[${1:n}, ${2:Wp}] = ellipord(${1:Wp}, ${2:Ws}, ${3:Rp}, ${4:Rs}, ${5:optional_'s'})'''
        description: '''[${1:n}, ${2:Wp}] = ellipord(${1:Wp}, ${2:Ws}, ${3:Rp}, ${4:Rs}, ${5:optional_'s'})'''


    "buffer":
        prefix: "buffer"
        body: '''[${1:y}, ${2:z}, ${3:opt}] = buffer(${1:x}, ${2:n}, ${3:p}, ${4:optional_opt})'''
        description: '''[${1:y}, ${2:z}, ${3:opt}] = buffer(${1:x}, ${2:n}, ${3:p}, ${4:optional_opt})'''


    "tukeywin":
        prefix: "tukeywin"
        body: '''${1:w} = tukeywin(${1:L}, ${2:optional_r})'''
        description: '''${1:w} = tukeywin(${1:L}, ${2:optional_r})'''


    "ismaxphase":
        prefix: "ismaxphase"
        body: '''${1:flag} = ismaxphase(${1:d}, ${2:optional_tol})'''
        description: '''${1:flag} = ismaxphase(${1:d}, ${2:optional_tol})'''


    "rectwin":
        prefix: "rectwin"
        body: '''${1:w} = rectwin(${1:L})'''
        description: '''${1:w} = rectwin(${1:L})'''


    "envelope":
        prefix: "envelope"
        body: '''[${1:yupper}, ${2:ylower}] = envelope(${1:x}, ${2:np}, ${3:'peak'})'''
        description: '''[${1:yupper}, ${2:ylower}] = envelope(${1:x}, ${2:np}, ${3:'peak'})'''


    "impz":
        prefix: "impz"
        body: '''[${1:h}, ${2:t}] = impz(${1:d}, ${2:n}, ${3:optional_fs})'''
        description: '''[${1:h}, ${2:t}] = impz(${1:d}, ${2:n}, ${3:optional_fs})'''


    "sos2zp":
        prefix: "sos2zp"
        body: '''[${1:z}, ${2:p}, ${3:k}] = sos2zp(${1:sos}, ${2:optional_g})'''
        description: '''[${1:z}, ${2:p}, ${3:k}] = sos2zp(${1:sos}, ${2:optional_g})'''


    "rpmtrack":
        prefix: "rpmtrack"
        body: '''[${1:rpm}, ${2:tout}] = rpmtrack(${1:xt}, ${2:order}, ${3:p}, 'Method', ${4:value}, 'FrequencyResolution', ${5:value}, 'PowerPenalty', ${6:value}, 'FrequencyPenalty', ${7:value}, 'StartTime', ${8:value}, 'EndTime', ${9:value})'''
        description: '''[${1:rpm}, ${2:tout}] = rpmtrack(${1:xt}, ${2:order}, ${3:p}, 'Method', ${4:value}, 'FrequencyResolution', ${5:value}, 'PowerPenalty', ${6:value}, 'FrequencyPenalty', ${7:value}, 'StartTime', ${8:value}, 'EndTime', ${9:value})'''


    "cheb2ap":
        prefix: "cheb2ap"
        body: '''[${1:z}, ${2:p}, ${3:k}] = cheb2ap(${1:n}, ${2:Rs})'''
        description: '''[${1:z}, ${2:p}, ${3:k}] = cheb2ap(${1:n}, ${2:Rs})'''


    "sinc":
        prefix: "sinc"
        body: '''${1:y} = sinc(${1:x})'''
        description: '''${1:y} = sinc(${1:x})'''


    "cheb2ord":
        prefix: "cheb2ord"
        body: '''[${1:n}, ${2:Ws}] = cheb2ord(${1:Wp}, ${2:Ws}, ${3:Rp}, ${4:Rs}, ${5:optional_'s'})'''
        description: '''[${1:n}, ${2:Ws}] = cheb2ord(${1:Wp}, ${2:Ws}, ${3:Rp}, ${4:Rs}, ${5:optional_'s'})'''


    "filtfilt":
        prefix: "filtfilt"
        body: '''${1:y} = filtfilt(${1:d}, ${2:x})'''
        description: '''${1:y} = filtfilt(${1:d}, ${2:x})'''


    "rooteig":
        prefix: "rooteig"
        body: '''[${1:f}, ${2:pow}] = rooteig(${1:x}, ${2:p}, ${3:optional_fs}, ${4:optional_'corr'})'''
        description: '''[${1:f}, ${2:pow}] = rooteig(${1:x}, ${2:p}, ${3:optional_fs}, ${4:optional_'corr'})'''


    "islinphase":
        prefix: "islinphase"
        body: '''${1:flag} = islinphase(${1:d}, ${2:optional_tol})'''
        description: '''${1:flag} = islinphase(${1:d}, ${2:optional_tol})'''


    "peak2peak":
        prefix: "peak2peak"
        body: '''${1:Y} = peak2peak(${1:X}, ${2:optional_DIM})'''
        description: '''${1:Y} = peak2peak(${1:X}, ${2:optional_DIM})'''


    "rceps":
        prefix: "rceps"
        body: '''[${1:y}, ${2:ym}] = rceps(${1:x})'''
        description: '''[${1:y}, ${2:ym}] = rceps(${1:x})'''


    "besself":
        prefix: "besself"
        body: '''[${1:A}, ${2:B}, ${3:C}, ${4:D}] = besself(${1:n}, ${2:Wo}, ${3:optional_ftype})'''
        description: '''[${1:A}, ${2:B}, ${3:C}, ${4:D}] = besself(${1:n}, ${2:Wo}, ${3:optional_ftype})'''


    "rms":
        prefix: "rms"
        body: '''${1:y} = rms(${1:x}, ${2:optional_dim})'''
        description: '''${1:y} = rms(${1:x}, ${2:optional_dim})'''


    "powerbw":
        prefix: "powerbw"
        body: '''[${1:bw}, ${2:flo}, ${3:fhi}, ${4:power}] = powerbw(${1:sxx}, ${2:f}, ${3:rbw}, ${4:freqrange}, ${5:optional_r})'''
        description: '''[${1:bw}, ${2:flo}, ${3:fhi}, ${4:power}] = powerbw(${1:sxx}, ${2:f}, ${3:rbw}, ${4:freqrange}, ${5:optional_r})'''


    "highpass":
        prefix: "highpass"
        body: '''[${1:y}, ${2:d}] = highpass(${1:xt}, ${2:fpass}, 'ImpulseResponse', ${3:value}, 'Steepness', ${4:value}, 'StopbandAttenuation', ${5:value})'''
        description: '''[${1:y}, ${2:d}] = highpass(${1:xt}, ${2:fpass}, 'ImpulseResponse', ${3:value}, 'Steepness', ${4:value}, 'StopbandAttenuation', ${5:value})'''


    "tfestimate":
        prefix: "tfestimate"
        body: '''[${1:txy}, ${2:f}] = tfestimate(${1:x}, ${2:y}, ${3:window}, ${4:noverlap}, ${5:f}, ${6:fs}, ${7:optional_'mimo'}, ${8:optional_freqrange}, ${9:'Estimator'}, ${10:est})'''
        description: '''[${1:txy}, ${2:f}] = tfestimate(${1:x}, ${2:y}, ${3:window}, ${4:noverlap}, ${5:f}, ${6:fs}, ${7:optional_'mimo'}, ${8:optional_freqrange}, ${9:'Estimator'}, ${10:est})'''


    "dpss":
        prefix: "dpss"
        body: '''[${1:dps_seq}, ${2:lambda}] = dpss(${1:seq_length}, ${2:time_halfbandwidth}, ${3:'interp_method'}, ${4:optional_Ni}, ${5:optional_'trace'})'''
        description: '''[${1:dps_seq}, ${2:lambda}] = dpss(${1:seq_length}, ${2:time_halfbandwidth}, ${3:'interp_method'}, ${4:optional_Ni}, ${5:optional_'trace'})'''


    "filt2block":
        prefix: "filt2block"
        body: '''filt2block(${1:d}, ${2:optional_'subsystem'}, ${3:'FilterStructure'}, ${4:optional_structure}, 'Destination', ${5:value}, 'BlockName', ${6:value}, 'OverwriteBlock', ${7:value}, 'MapCoefficientsToPorts', ${8:value}, 'CoefficientNames', ${9:value}, 'FrameBasedProcessing', ${10:value}, 'OptimizeZeros', ${11:value}, 'OptimizeOnes', ${12:value}, 'OptimizeNegativeOnes', ${13:value}, 'OptimizeDelayChains', ${14:value})'''
        description: '''filt2block(${1:d}, ${2:optional_'subsystem'}, ${3:'FilterStructure'}, ${4:optional_structure}, 'Destination', ${5:value}, 'BlockName', ${6:value}, 'OverwriteBlock', ${7:value}, 'MapCoefficientsToPorts', ${8:value}, 'CoefficientNames', ${9:value}, 'FrameBasedProcessing', ${10:value}, 'OptimizeZeros', ${11:value}, 'OptimizeOnes', ${12:value}, 'OptimizeNegativeOnes', ${13:value}, 'OptimizeDelayChains', ${14:value})'''


    "freqs":
        prefix: "freqs"
        body: '''[${1:h}, ${2:w}] = freqs(${1:b}, ${2:a}, ${3:n})'''
        description: '''[${1:h}, ${2:w}] = freqs(${1:b}, ${2:a}, ${3:n})'''


    "gauspuls":
        prefix: "gauspuls"
        body: '''${1:tc} = gauspuls(${1:'cutoff'}, ${2:fc}, ${3:bw}, ${4:bwr}, ${5:optional_tpe})'''
        description: '''${1:tc} = gauspuls(${1:'cutoff'}, ${2:fc}, ${3:bw}, ${4:bwr}, ${5:optional_tpe})'''


    "rpmfreqmap":
        prefix: "rpmfreqmap"
        body: '''[${1:map}, ${2:freq}, ${3:rpm}, ${4:time}, ${5:res}] = rpmfreqmap(${1:x}, ${2:fs}, ${3:rpm}, ${4:res}, 'Amplitude', ${5:value}, 'OverlapPercent', ${6:value}, 'Scale', ${7:value}, 'Window', ${8:value})'''
        description: '''[${1:map}, ${2:freq}, ${3:rpm}, ${4:time}, ${5:res}] = rpmfreqmap(${1:x}, ${2:fs}, ${3:rpm}, ${4:res}, 'Amplitude', ${5:value}, 'OverlapPercent', ${6:value}, 'Scale', ${7:value}, 'Window', ${8:value})'''


    "pcov":
        prefix: "pcov"
        body: '''[${1:pxx}, ${2:f}, ${3:pxxc}] = pcov(${1:x}, ${2:order}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:'ConfidenceLevel'}, ${7:optional_probability})'''
        description: '''[${1:pxx}, ${2:f}, ${3:pxxc}] = pcov(${1:x}, ${2:order}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:'ConfidenceLevel'}, ${7:optional_probability})'''


    "cfirpm":
        prefix: "cfirpm"
        body: '''[${1:b}, ${2:delta}, ${3:opt}] = cfirpm(${1:n}, ${2:f}, ${3:a}, ${4:optional_w}, ${5:optional_'sym'}, ${6:optional_'skip_stage2'}, ${7:optional_'debug'}, ${8:optional_{lgrid}})'''
        description: '''[${1:b}, ${2:delta}, ${3:opt}] = cfirpm(${1:n}, ${2:f}, ${3:a}, ${4:optional_w}, ${5:optional_'sym'}, ${6:optional_'skip_stage2'}, ${7:optional_'debug'}, ${8:optional_{lgrid}})'''


    "dpsssave":
        prefix: "dpsssave"
        body: '''${1:status} = dpsssave(${1:time_halfbandwidth}, ${2:dps_seq}, ${3:lambda})'''
        description: '''${1:status} = dpsssave(${1:time_halfbandwidth}, ${2:dps_seq}, ${3:lambda})'''


    "rpmordermap":
        prefix: "rpmordermap"
        body: '''[${1:map}, ${2:order}, ${3:rpm}, ${4:time}, ${5:res}] = rpmordermap(${1:x}, ${2:fs}, ${3:rpm}, ${4:res}, 'Amplitude', ${5:value}, 'OverlapPercent', ${6:value}, 'Scale', ${7:value}, 'Window', ${8:value})'''
        description: '''[${1:map}, ${2:order}, ${3:rpm}, ${4:time}, ${5:res}] = rpmordermap(${1:x}, ${2:fs}, ${3:rpm}, ${4:res}, 'Amplitude', ${5:value}, 'OverlapPercent', ${6:value}, 'Scale', ${7:value}, 'Window', ${8:value})'''


    "modulate":
        prefix: "modulate"
        body: '''[${1:y}, ${2:t}] = modulate(${1:x}, ${2:fc}, ${3:fs}, ${4:'method'}, ${5:optional_opt})'''
        description: '''[${1:y}, ${2:t}] = modulate(${1:x}, ${2:fc}, ${3:fs}, ${4:'method'}, ${5:optional_opt})'''


    "lpc":
        prefix: "lpc"
        body: '''[${1:a}, ${2:g}] = lpc(${1:x}, ${2:p})'''
        description: '''[${1:a}, ${2:g}] = lpc(${1:x}, ${2:p})'''


    "pmusic":
        prefix: "pmusic"
        body: '''[${1:S}, ${2:f}, ${3:v}, ${4:e}] = pmusic(${1:x}, ${2:p}, ${3:nfft}, ${4:fs}, ${5:nwin}, ${6:noverlap}, ${7:optional_'corr'}, ${8:optional_freqrange})'''
        description: '''[${1:S}, ${2:f}, ${3:v}, ${4:e}] = pmusic(${1:x}, ${2:p}, ${3:nfft}, ${4:fs}, ${5:nwin}, ${6:noverlap}, ${7:optional_'corr'}, ${8:optional_freqrange})'''


    "pwelch":
        prefix: "pwelch"
        body: '''[${1:pxx}, ${2:f}, ${3:pxxc}] = pwelch(${1:x}, ${2:window}, ${3:noverlap}, ${4:f}, ${5:fs}, ${6:optional_freqrange}, ${7:optional_spectrumtype}, ${8:optional_trace}, ${9:'ConfidenceLevel'}, ${10:optional_probability})'''
        description: '''[${1:pxx}, ${2:f}, ${3:pxxc}] = pwelch(${1:x}, ${2:window}, ${3:noverlap}, ${4:f}, ${5:fs}, ${6:optional_freqrange}, ${7:optional_spectrumtype}, ${8:optional_trace}, ${9:'ConfidenceLevel'}, ${10:optional_probability})'''


    "impzlength":
        prefix: "impzlength"
        body: '''${1:len} = impzlength(${1:d}, ${2:optional_tol})'''
        description: '''${1:len} = impzlength(${1:d}, ${2:optional_tol})'''


    "diric":
        prefix: "diric"
        body: '''${1:y} = diric(${1:x}, ${2:n})'''
        description: '''${1:y} = diric(${1:x}, ${2:n})'''


    "lp2bp":
        prefix: "lp2bp"
        body: '''[${1:At}, ${2:Bt}, ${3:Ct}, ${4:Dt}] = lp2bp(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:Wo}, ${6:Bw})'''
        description: '''[${1:At}, ${2:Bt}, ${3:Ct}, ${4:Dt}] = lp2bp(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:Wo}, ${6:Bw})'''


    "bitrevorder":
        prefix: "bitrevorder"
        body: '''[${1:y}, ${2:i}] = bitrevorder(${1:x})'''
        description: '''[${1:y}, ${2:i}] = bitrevorder(${1:x})'''


    "snr":
        prefix: "snr"
        body: '''[${1:r}, ${2:noisepow}] = snr(${1:sxx}, ${2:f}, ${3:rbw}, ${4:optional_n}, ${5:'power'}, ${6:optional_'aliased'})'''
        description: '''[${1:r}, ${2:noisepow}] = snr(${1:sxx}, ${2:f}, ${3:rbw}, ${4:optional_n}, ${5:'power'}, ${6:optional_'aliased'})'''


    "sgolayfilt":
        prefix: "sgolayfilt"
        body: '''${1:y} = sgolayfilt(${1:x}, ${2:order}, ${3:framelen}, ${4:weights}, ${5:optional_dim})'''
        description: '''${1:y} = sgolayfilt(${1:x}, ${2:order}, ${3:framelen}, ${4:weights}, ${5:optional_dim})'''


    "dutycycle":
        prefix: "dutycycle"
        body: '''${1:D} = dutycycle(${1:TAU}, ${2:PRF})'''
        description: '''${1:D} = dutycycle(${1:TAU}, ${2:PRF})'''


    "edr":
        prefix: "edr"
        body: '''[${1:dist}, ${2:ix}, ${3:iy}] = edr(${1:x}, ${2:y}, ${3:tol}, ${4:optional_maxsamp}, ${5:optional_metric})'''
        description: '''[${1:dist}, ${2:ix}, ${3:iy}] = edr(${1:x}, ${2:y}, ${3:tol}, ${4:optional_maxsamp}, ${5:optional_metric})'''


    "arcov":
        prefix: "arcov"
        body: '''[${1:a}, ${2:e}] = arcov(${1:x}, ${2:p})'''
        description: '''[${1:a}, ${2:e}] = arcov(${1:x}, ${2:p})'''


    "obw":
        prefix: "obw"
        body: '''[${1:bw}, ${2:flo}, ${3:fhi}, ${4:power}] = obw(${1:sxx}, ${2:f}, ${3:rbw}, ${4:freqrange}, ${5:optional_p})'''
        description: '''[${1:bw}, ${2:flo}, ${3:fhi}, ${4:power}] = obw(${1:sxx}, ${2:f}, ${3:rbw}, ${4:freqrange}, ${5:optional_p})'''


    "ac2poly":
        prefix: "ac2poly"
        body: '''[${1:a}, ${2:efinal}] = ac2poly(${1:r})'''
        description: '''[${1:a}, ${2:efinal}] = ac2poly(${1:r})'''


    "firpm":
        prefix: "firpm"
        body: '''${1:b} = firpm(${1:n}, ${2:f}, ${3:@fresp}, ${4:w}, ${5:optional_'ftype'})'''
        description: '''${1:b} = firpm(${1:n}, ${2:f}, ${3:@fresp}, ${4:w}, ${5:optional_'ftype'})'''


    "instfreq":
        prefix: "instfreq"
        body: '''[${1:ifq}, ${2:t}] = instfreq(${1:tfd}, ${2:fd}, ${3:td}, 'FrequencyLimits', ${4:value}, 'Method', ${5:value})'''
        description: '''[${1:ifq}, ${2:t}] = instfreq(${1:tfd}, ${2:fd}, ${3:td}, 'FrequencyLimits', ${4:value}, 'Method', ${5:value})'''


    "cheb1ap":
        prefix: "cheb1ap"
        body: '''[${1:z}, ${2:p}, ${3:k}] = cheb1ap(${1:n}, ${2:Rp})'''
        description: '''[${1:z}, ${2:p}, ${3:k}] = cheb1ap(${1:n}, ${2:Rp})'''


    "cusum":
        prefix: "cusum"
        body: '''[${1:iupper}, ${2:ilower}, ${3:uppersum}, ${4:lowersum}] = cusum(${1:x}, ${2:climit}, ${3:mshift}, ${4:tmean}, ${5:tdev}, ${6:optional_'all'})'''
        description: '''[${1:iupper}, ${2:ilower}, ${3:uppersum}, ${4:lowersum}] = cusum(${1:x}, ${2:climit}, ${3:mshift}, ${4:tmean}, ${5:tdev}, ${6:optional_'all'})'''


    "lsf2poly":
        prefix: "lsf2poly"
        body: '''${1:a} = lsf2poly(${1:lsf})'''
        description: '''${1:a} = lsf2poly(${1:lsf})'''


    "latcfilt":
        prefix: "latcfilt"
        body: '''[${1:f}, ${2:g}, ${3:zf}] = latcfilt(${1:k}, ${2:1}, ${3:x}, ${4:'ic'}, ${5:zi}, ${6:optional_dim})'''
        description: '''[${1:f}, ${2:g}, ${3:zf}] = latcfilt(${1:k}, ${2:1}, ${3:x}, ${4:'ic'}, ${5:zi}, ${6:optional_dim})'''


    "orderwaveform":
        prefix: "orderwaveform"
        body: '''${1:xrec} = orderwaveform(${1:x}, ${2:fs}, ${3:rpm}, ${4:orderlist}, ${5:optional_rpmrefidx}, 'FilterOrder', ${6:value}, 'Bandwidth', ${7:value}, 'Decouple', ${8:value}, 'SegmentLength', ${9:value})'''
        description: '''${1:xrec} = orderwaveform(${1:x}, ${2:fs}, ${3:rpm}, ${4:orderlist}, ${5:optional_rpmrefidx}, 'FilterOrder', ${6:value}, 'Bandwidth', ${7:value}, 'Decouple', ${8:value}, 'SegmentLength', ${9:value})'''


    "latc2tf":
        prefix: "latc2tf"
        body: '''[${1:num}, ${2:den}] = latc2tf(${1:k}, ${2:'firoption'})'''
        description: '''[${1:num}, ${2:den}] = latc2tf(${1:k}, ${2:'firoption'})'''


    "upsample":
        prefix: "upsample"
        body: '''${1:y} = upsample(${1:x}, ${2:n}, ${3:optional_phase})'''
        description: '''${1:y} = upsample(${1:x}, ${2:n}, ${3:optional_phase})'''


    "levinson":
        prefix: "levinson"
        body: '''[${1:a}, ${2:e}, ${3:k}] = levinson(${1:r}, ${2:n})'''
        description: '''[${1:a}, ${2:e}, ${3:k}] = levinson(${1:r}, ${2:n})'''


    "pulsesep":
        prefix: "pulsesep"
        body: '''[${1:S}, ${2:INITCROSS}, ${3:FINALCROSS}, ${4:NEXTCROSS}, ${5:MIDLEV}] = pulsesep(${1:X}, ${2:optional_T}, 'MidPercentReferenceLevel', ${3:value}, 'Polarity', ${4:value}, 'StateLevels', ${5:value}, 'Tolerance', ${6:value})'''
        description: '''[${1:S}, ${2:INITCROSS}, ${3:FINALCROSS}, ${4:NEXTCROSS}, ${5:MIDLEV}] = pulsesep(${1:X}, ${2:optional_T}, 'MidPercentReferenceLevel', ${3:value}, 'Polarity', ${4:value}, 'StateLevels', ${5:value}, 'Tolerance', ${6:value})'''


    "buttap":
        prefix: "buttap"
        body: '''[${1:z}, ${2:p}, ${3:k}] = buttap(${1:n})'''
        description: '''[${1:z}, ${2:p}, ${3:k}] = buttap(${1:n})'''


    "barthannwin":
        prefix: "barthannwin"
        body: '''${1:w} = barthannwin(${1:L})'''
        description: '''${1:w} = barthannwin(${1:L})'''


    "zplane":
        prefix: "zplane"
        body: '''[${1:vz}, ${2:vp}, ${3:vk}] = zplane(${1:d})'''
        description: '''[${1:vz}, ${2:vp}, ${3:vk}] = zplane(${1:d})'''


    "isallpass":
        prefix: "isallpass"
        body: '''${1:flag} = isallpass(${1:d}, ${2:optional_tol})'''
        description: '''${1:flag} = isallpass(${1:d}, ${2:optional_tol})'''


    "midcross":
        prefix: "midcross"
        body: '''[${1:C}, ${2:MIDLEV}] = midcross(${1:X}, ${2:optional_T}, 'MidPercentReferenceLevel', ${3:value}, 'StateLevels', ${4:value}, 'Tolerance', ${5:value})'''
        description: '''[${1:C}, ${2:MIDLEV}] = midcross(${1:X}, ${2:optional_T}, 'MidPercentReferenceLevel', ${3:value}, 'StateLevels', ${4:value}, 'Tolerance', ${5:value})'''


    "bandpass":
        prefix: "bandpass"
        body: '''[${1:y}, ${2:d}] = bandpass(${1:xt}, ${2:fpass}, 'ImpulseResponse', ${3:value}, 'Steepness', ${4:value}, 'StopbandAttenuation', ${5:value})'''
        description: '''[${1:y}, ${2:d}] = bandpass(${1:xt}, ${2:fpass}, 'ImpulseResponse', ${3:value}, 'Steepness', ${4:value}, 'StopbandAttenuation', ${5:value})'''


    "downsample":
        prefix: "downsample"
        body: '''${1:y} = downsample(${1:x}, ${2:n}, ${3:optional_phase})'''
        description: '''${1:y} = downsample(${1:x}, ${2:n}, ${3:optional_phase})'''


    "interp":
        prefix: "interp"
        body: '''[${1:y}, ${2:b}] = interp(${1:x}, ${2:r}, ${3:n}, ${4:optional_alpha})'''
        description: '''[${1:y}, ${2:b}] = interp(${1:x}, ${2:r}, ${3:n}, ${4:optional_alpha})'''


    "pkurtosis":
        prefix: "pkurtosis"
        body: '''[${1:sk}, ${2:f}, ${3:thresh}] = pkurtosis(${1:s}, ${2:sampx}, ${3:f}, ${4:window}, ${5:'ConfidenceLevel'}, ${6:p})'''
        description: '''[${1:sk}, ${2:f}, ${3:thresh}] = pkurtosis(${1:s}, ${2:sampx}, ${3:f}, ${4:window}, ${5:'ConfidenceLevel'}, ${6:p})'''


    "firpmord":
        prefix: "firpmord"
        body: '''${1:c} = firpmord(${1:f}, ${2:a}, ${3:dev}, ${4:fs}, ${5:'cell'})'''
        description: '''${1:c} = firpmord(${1:f}, ${2:a}, ${3:dev}, ${4:fs}, ${5:'cell'})'''


    "phasez":
        prefix: "phasez"
        body: '''${1:phi} = phasez(${1:d}, ${2:optional_f}, ${3:optional_fs})'''
        description: '''${1:phi} = phasez(${1:d}, ${2:optional_f}, ${3:optional_fs})'''


    "resample":
        prefix: "resample"
        body: '''[${1:y}, ${2:ty}, ${3:b}] = resample(${1:x}, ${2:tx}, ${3:fs}, ${4:optional_p}, ${5:q}, ${6:optional_method})'''
        description: '''[${1:y}, ${2:ty}, ${3:b}] = resample(${1:x}, ${2:tx}, ${3:fs}, ${4:optional_p}, ${5:q}, ${6:optional_method})'''


    "rc2poly":
        prefix: "rc2poly"
        body: '''[${1:a}, ${2:efinal}] = rc2poly(${1:k}, ${2:optional_r0})'''
        description: '''[${1:a}, ${2:efinal}] = rc2poly(${1:k}, ${2:optional_r0})'''


    "sosfilt":
        prefix: "sosfilt"
        body: '''${1:y} = sosfilt(${1:sos}, ${2:x}, ${3:optional_dim})'''
        description: '''${1:y} = sosfilt(${1:sos}, ${2:x}, ${3:optional_dim})'''


    "schurrc":
        prefix: "schurrc"
        body: '''[${1:k}, ${2:e}] = schurrc(${1:r})'''
        description: '''[${1:k}, ${2:e}] = schurrc(${1:r})'''


    "unshiftdata":
        prefix: "unshiftdata"
        body: '''${1:y} = unshiftdata(${1:x}, ${2:perm}, ${3:nshifts})'''
        description: '''${1:y} = unshiftdata(${1:x}, ${2:perm}, ${3:nshifts})'''


    "mag2db":
        prefix: "mag2db"
        body: '''${1:ydb} = mag2db(${1:y})'''
        description: '''${1:ydb} = mag2db(${1:y})'''


    "modalfit":
        prefix: "modalfit"
        body: '''[${1:fn}, ${2:dr}, ${3:ms}, ${4:ofrf}] = modalfit(${1:sys}, ${2:f}, ${3:mnum}, 'Feedthrough', ${4:value}, 'FitMethod', ${5:value}, 'FreqRange', ${6:value}, 'PhysFreq', ${7:value}, 'DriveIndex', ${8:value})'''
        description: '''[${1:fn}, ${2:dr}, ${3:ms}, ${4:ofrf}] = modalfit(${1:sys}, ${2:f}, ${3:mnum}, 'Feedthrough', ${4:value}, 'FitMethod', ${5:value}, 'FreqRange', ${6:value}, 'PhysFreq', ${7:value}, 'DriveIndex', ${8:value})'''


    "rc2ac":
        prefix: "rc2ac"
        body: '''${1:r} = rc2ac(${1:k}, ${2:r0})'''
        description: '''${1:r} = rc2ac(${1:k}, ${2:r0})'''


    "toi":
        prefix: "toi"
        body: '''[${1:oip3}, ${2:fundpow}, ${3:fundfreq}, ${4:imodpow}, ${5:imodfreq}] = toi(${1:sxx}, ${2:f}, ${3:rbw}, ${4:'power'})'''
        description: '''[${1:oip3}, ${2:fundpow}, ${3:fundfreq}, ${4:imodpow}, ${5:imodfreq}] = toi(${1:sxx}, ${2:f}, ${3:rbw}, ${4:'power'})'''


    "db":
        prefix: "db"
        body: '''${1:dboutput} = db(${1:x}, ${2:optional_SignalType}, ${3:optional_R})'''
        description: '''${1:dboutput} = db(${1:x}, ${2:optional_SignalType}, ${3:optional_R})'''


    "idct":
        prefix: "idct"
        body: '''${1:x} = idct(${1:y}, ${2:optional_n}, ${3:optional_dim}, ${4:'Type'}, ${5:dcttype})'''
        description: '''${1:x} = idct(${1:y}, ${2:optional_n}, ${3:optional_dim}, ${4:'Type'}, ${5:dcttype})'''


    "bohmanwin":
        prefix: "bohmanwin"
        body: '''${1:w} = bohmanwin(${1:L})'''
        description: '''${1:w} = bohmanwin(${1:L})'''


    "pow2db":
        prefix: "pow2db"
        body: '''${1:ydb} = pow2db(${1:y})'''
        description: '''${1:ydb} = pow2db(${1:y})'''


    "kaiser":
        prefix: "kaiser"
        body: '''${1:w} = kaiser(${1:L}, ${2:optional_beta})'''
        description: '''${1:w} = kaiser(${1:L}, ${2:optional_beta})'''


    "isminphase":
        prefix: "isminphase"
        body: '''${1:flag} = isminphase(${1:d}, ${2:optional_tol})'''
        description: '''${1:flag} = isminphase(${1:d}, ${2:optional_tol})'''


    "vco":
        prefix: "vco"
        body: '''${1:c} = vco(${1:x}, ${2:[Fmin Fmax]}, ${3:fs})'''
        description: '''${1:c} = vco(${1:x}, ${2:[Fmin Fmax]}, ${3:fs})'''


    "invfreqs":
        prefix: "invfreqs"
        body: '''[${1:b}, ${2:a}] = invfreqs(${1:h}, ${2:w}, ${3:'complex'}, ${4:n}, ${5:m}, ${6:wt}, ${7:iter}, ${8:tol}, ${9:optional_'trace'})'''
        description: '''[${1:b}, ${2:a}] = invfreqs(${1:h}, ${2:w}, ${3:'complex'}, ${4:n}, ${5:m}, ${6:wt}, ${7:iter}, ${8:tol}, ${9:optional_'trace'})'''


    "tripuls":
        prefix: "tripuls"
        body: '''${1:y} = tripuls(${1:T}, ${2:optional_w}, ${3:optional_s})'''
        description: '''${1:y} = tripuls(${1:T}, ${2:optional_w}, ${3:optional_s})'''


    "ordertrack":
        prefix: "ordertrack"
        body: '''[${1:mag}, ${2:rpm}, ${3:time}] = ordertrack(${1:map}, ${2:order}, ${3:rpm}, ${4:orderlist})'''
        description: '''[${1:mag}, ${2:rpm}, ${3:time}] = ordertrack(${1:map}, ${2:order}, ${3:rpm}, ${4:orderlist})'''


    "tf2sos":
        prefix: "tf2sos"
        body: '''[${1:sos}, ${2:g}] = tf2sos(${1:b}, ${2:a}, ${3:'order'}, ${4:optional_'scale'})'''
        description: '''[${1:sos}, ${2:g}] = tf2sos(${1:b}, ${2:a}, ${3:'order'}, ${4:optional_'scale'})'''


    "xspectrogram":
        prefix: "xspectrogram"
        body: '''[${1:s}, ${2:f}, ${3:t}, ${4:c}] = xspectrogram(${1:x}, ${2:y}, ${3:window}, ${4:noverlap}, ${5:f}, ${6:fs}, ${7:optional_freqrange}, ${8:optional_spectrumtype}, ${9:'MinThreshold'}, ${10:thresh}, ${11:optional_freqloc}, 'OutputTimeDimension', ${12:value})'''
        description: '''[${1:s}, ${2:f}, ${3:t}, ${4:c}] = xspectrogram(${1:x}, ${2:y}, ${3:window}, ${4:noverlap}, ${5:f}, ${6:fs}, ${7:optional_freqrange}, ${8:optional_spectrumtype}, ${9:'MinThreshold'}, ${10:thresh}, ${11:optional_freqloc}, 'OutputTimeDimension', ${12:value})'''


    "issingle":
        prefix: "issingle"
        body: '''${1:flag} = issingle(${1:d})'''
        description: '''${1:flag} = issingle(${1:d})'''


    "rootmusic":
        prefix: "rootmusic"
        body: '''[${1:f}, ${2:pow}] = rootmusic(${1:x}, ${2:p}, ${3:optional_fs}, ${4:optional_'corr'})'''
        description: '''[${1:f}, ${2:pow}] = rootmusic(${1:x}, ${2:p}, ${3:optional_fs}, ${4:optional_'corr'})'''


    "cell2sos":
        prefix: "cell2sos"
        body: '''${1:m} = cell2sos(${1:c})'''
        description: '''${1:m} = cell2sos(${1:c})'''


    "armcov":
        prefix: "armcov"
        body: '''[${1:a}, ${2:e}] = armcov(${1:x}, ${2:p})'''
        description: '''[${1:a}, ${2:e}] = armcov(${1:x}, ${2:p})'''


    "lp2lp":
        prefix: "lp2lp"
        body: '''[${1:At}, ${2:Bt}, ${3:Ct}, ${4:Dt}] = lp2lp(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:Wo})'''
        description: '''[${1:At}, ${2:Bt}, ${3:Ct}, ${4:Dt}] = lp2lp(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:Wo})'''


    "fwht":
        prefix: "fwht"
        body: '''${1:y} = fwht(${1:x}, ${2:n}, ${3:optional_ordering})'''
        description: '''${1:y} = fwht(${1:x}, ${2:n}, ${3:optional_ordering})'''


    "tfridge":
        prefix: "tfridge"
        body: '''[${1:fridge}, ${2:iridge}, ${3:lridge}] = tfridge(${1:tfm}, ${2:f}, ${3:penalty}, ${4:'NumRidges'}, ${5:nr}, ${6:'NumFrequencyBins'}, ${7:nbins})'''
        description: '''[${1:fridge}, ${2:iridge}, ${3:lridge}] = tfridge(${1:tfm}, ${2:f}, ${3:penalty}, ${4:'NumRidges'}, ${5:nr}, ${6:'NumFrequencyBins'}, ${7:nbins})'''


    "zerophase":
        prefix: "zerophase"
        body: '''[${1:Hr}, ${2:f}] = zerophase(${1:d}, ${2:f}, ${3:optional_fs})'''
        description: '''[${1:Hr}, ${2:f}] = zerophase(${1:d}, ${2:f}, ${3:optional_fs})'''


    "taylorwin":
        prefix: "taylorwin"
        body: '''${1:w} = taylorwin(${1:n}, ${2:nbar}, ${3:optional_sll})'''
        description: '''${1:w} = taylorwin(${1:n}, ${2:nbar}, ${3:optional_sll})'''


    "invfreqz":
        prefix: "invfreqz"
        body: '''[${1:b}, ${2:a}] = invfreqz(${1:h}, ${2:w}, ${3:'complex'}, ${4:n}, ${5:m}, ${6:wt}, ${7:iter}, ${8:tol}, ${9:optional_'trace'})'''
        description: '''[${1:b}, ${2:a}] = invfreqz(${1:h}, ${2:w}, ${3:'complex'}, ${4:n}, ${5:m}, ${6:wt}, ${7:iter}, ${8:tol}, ${9:optional_'trace'})'''


    "double":
        prefix: "double"
        body: '''${1:f2} = double(${1:f1})'''
        description: '''${1:f2} = double(${1:f1})'''


    "sinad":
        prefix: "sinad"
        body: '''[${1:r}, ${2:totdistpow}] = sinad(${1:sxx}, ${2:f}, ${3:rbw}, ${4:'power'})'''
        description: '''[${1:r}, ${2:totdistpow}] = sinad(${1:sxx}, ${2:f}, ${3:rbw}, ${4:'power'})'''


    "tf2zpk":
        prefix: "tf2zpk"
        body: '''[${1:z}, ${2:p}, ${3:k}] = tf2zpk(${1:b}, ${2:a})'''
        description: '''[${1:z}, ${2:p}, ${3:k}] = tf2zpk(${1:b}, ${2:a})'''


    "fircls":
        prefix: "fircls"
        body: '''${1:b} = fircls(${1:n}, ${2:f}, ${3:amp}, ${4:up}, ${5:lo}, ${6:optional_'design_flag'})'''
        description: '''${1:b} = fircls(${1:n}, ${2:f}, ${3:amp}, ${4:up}, ${5:lo}, ${6:optional_'design_flag'})'''


    "goertzel":
        prefix: "goertzel"
        body: '''${1:dft_data} = goertzel(${1:data}, ${2:freq_indices}, ${3:optional_dim})'''
        description: '''${1:dft_data} = goertzel(${1:data}, ${2:freq_indices}, ${3:optional_dim})'''


    "seqperiod":
        prefix: "seqperiod"
        body: '''[${1:p}, ${2:num}] = seqperiod(${1:x})'''
        description: '''[${1:p}, ${2:num}] = seqperiod(${1:x})'''


    "czt":
        prefix: "czt"
        body: '''${1:y} = czt(${1:x}, ${2:m}, ${3:w}, ${4:a})'''
        description: '''${1:y} = czt(${1:x}, ${2:m}, ${3:w}, ${4:a})'''


    "cconv":
        prefix: "cconv"
        body: '''${1:c} = cconv(${1:gpuArrayA}, ${2:gpuArrayB}, ${3:n})'''
        description: '''${1:c} = cconv(${1:gpuArrayA}, ${2:gpuArrayB}, ${3:n})'''


    "info":
        prefix: "info"
        body: '''${1:s} = info(${1:d})'''
        description: '''${1:s} = info(${1:d})'''


    "iscola":
        prefix: "iscola"
        body: '''[${1:tf}, ${2:m}, ${3:maxDeviation}] = iscola(${1:window}, ${2:noverlap}, ${3:optional_method})'''
        description: '''[${1:tf}, ${2:m}, ${3:maxDeviation}] = iscola(${1:window}, ${2:noverlap}, ${3:optional_method})'''


    "blackman":
        prefix: "blackman"
        body: '''${1:w} = blackman(${1:N}, ${2:optional_SFLAG})'''
        description: '''${1:w} = blackman(${1:N}, ${2:optional_SFLAG})'''


    "uencode":
        prefix: "uencode"
        body: '''${1:y} = uencode(${1:u}, ${2:n}, ${3:v}, ${4:optional_'SignFlag'})'''
        description: '''${1:y} = uencode(${1:u}, ${2:n}, ${3:v}, ${4:optional_'SignFlag'})'''


    "firtype":
        prefix: "firtype"
        body: '''${1:t} = firtype(${1:d})'''
        description: '''${1:t} = firtype(${1:d})'''


    "stmcb":
        prefix: "stmcb"
        body: '''[${1:b}, ${2:a}] = stmcb(${1:y}, ${2:x}, ${3:nb}, ${4:na}, ${5:niter}, ${6:optional_ai})'''
        description: '''[${1:b}, ${2:a}] = stmcb(${1:y}, ${2:x}, ${3:nb}, ${4:na}, ${5:niter}, ${6:optional_ai})'''


    "cheb1ord":
        prefix: "cheb1ord"
        body: '''[${1:n}, ${2:Wp}] = cheb1ord(${1:Wp}, ${2:Ws}, ${3:Rp}, ${4:Rs}, ${5:optional_'s'})'''
        description: '''[${1:n}, ${2:Wp}] = cheb1ord(${1:Wp}, ${2:Ws}, ${3:Rp}, ${4:Rs}, ${5:optional_'s'})'''


    "dpssload":
        prefix: "dpssload"
        body: '''[${1:e}, ${2:v}] = dpssload(${1:n}, ${2:nw})'''
        description: '''[${1:e}, ${2:v}] = dpssload(${1:n}, ${2:nw})'''


    "cheby1":
        prefix: "cheby1"
        body: '''[${1:A}, ${2:B}, ${3:C}, ${4:D}] = cheby1(${1:n}, ${2:Rp}, ${3:Wp}, ${4:ftype}, ${5:optional_'s'})'''
        description: '''[${1:A}, ${2:B}, ${3:C}, ${4:D}] = cheby1(${1:n}, ${2:Rp}, ${3:Wp}, ${4:ftype}, ${5:optional_'s'})'''


    "istft":
        prefix: "istft"
        body: '''[${1:X}, ${2:T}] = istft(${1:S}, ${2:optional_Ts}, 'Window', ${3:value}, 'OverlapLength', ${4:value}, 'FFTLength', ${5:value}, 'Method', ${6:value}, 'ConjugateSymmetric', ${7:value}, 'Centered', ${8:value}, 'InputTimeDimension', ${9:value})'''
        description: '''[${1:X}, ${2:T}] = istft(${1:S}, ${2:optional_Ts}, 'Window', ${3:value}, 'OverlapLength', ${4:value}, 'FFTLength', ${5:value}, 'Method', ${6:value}, 'ConjugateSymmetric', ${7:value}, 'Centered', ${8:value}, 'InputTimeDimension', ${9:value})'''


    "firls":
        prefix: "firls"
        body: '''${1:b} = firls(${1:n}, ${2:f}, ${3:a}, ${4:optional_'ftype'})'''
        description: '''${1:b} = firls(${1:n}, ${2:f}, ${3:a}, ${4:optional_'ftype'})'''


    "poly2ac":
        prefix: "poly2ac"
        body: '''${1:r} = poly2ac(${1:a}, ${2:efinal})'''
        description: '''${1:r} = poly2ac(${1:a}, ${2:efinal})'''


    "corrmtx":
        prefix: "corrmtx"
        body: '''[${1:X}, ${2:R}] = corrmtx(${1:x}, ${2:m}, ${3:optional_method})'''
        description: '''[${1:X}, ${2:R}] = corrmtx(${1:x}, ${2:m}, ${3:optional_method})'''


    "periodogram":
        prefix: "periodogram"
        body: '''[${1:rpxx}, ${2:f}, ${3:pxx}, ${4:fc}] = periodogram(${1:x}, ${2:window}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:optional_spectrumtype}, ${7:optional_'reassigned'})'''
        description: '''[${1:rpxx}, ${2:f}, ${3:pxx}, ${4:fc}] = periodogram(${1:x}, ${2:window}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:optional_spectrumtype}, ${7:optional_'reassigned'})'''


    "kaiserord":
        prefix: "kaiserord"
        body: '''${1:c} = kaiserord(${1:f}, ${2:a}, ${3:dev}, ${4:fs}, ${5:'cell'})'''
        description: '''${1:c} = kaiserord(${1:f}, ${2:a}, ${3:dev}, ${4:fs}, ${5:'cell'})'''


    "buttord":
        prefix: "buttord"
        body: '''[${1:n}, ${2:Wn}] = buttord(${1:Wp}, ${2:Ws}, ${3:Rp}, ${4:Rs}, ${5:optional_'s'})'''
        description: '''[${1:n}, ${2:Wn}] = buttord(${1:Wp}, ${2:Ws}, ${3:Rp}, ${4:Rs}, ${5:optional_'s'})'''


    "dftmtx":
        prefix: "dftmtx"
        body: '''${1:A} = dftmtx(${1:n})'''
        description: '''${1:A} = dftmtx(${1:n})'''


    "lp2bs":
        prefix: "lp2bs"
        body: '''[${1:At}, ${2:Bt}, ${3:Ct}, ${4:Dt}] = lp2bs(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:Wo}, ${6:Bw})'''
        description: '''[${1:At}, ${2:Bt}, ${3:Ct}, ${4:Dt}] = lp2bs(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:Wo}, ${6:Bw})'''


    "envspectrum":
        prefix: "envspectrum"
        body: '''[${1:es}, ${2:f}, ${3:env}, ${4:t}] = envspectrum(${1:xt}, 'Method', ${2:value}, 'Band', ${3:value}, 'FilterOrder', ${4:value})'''
        description: '''[${1:es}, ${2:f}, ${3:env}, ${4:t}] = envspectrum(${1:xt}, 'Method', ${2:value}, 'Band', ${3:value}, 'FilterOrder', ${4:value})'''


    "modalsd":
        prefix: "modalsd"
        body: '''${1:fn} = modalsd(${1:frf}, ${2:f}, ${3:fs}, 'FitMethod', ${4:value}, 'FreqRange', ${5:value}, 'MaxModes', ${6:value}, 'SCriteria', ${7:value})'''
        description: '''${1:fn} = modalsd(${1:frf}, ${2:f}, ${3:fs}, 'FitMethod', ${4:value}, 'FreqRange', ${5:value}, 'MaxModes', ${6:value}, 'SCriteria', ${7:value})'''


    "stft":
        prefix: "stft"
        body: '''[${1:S}, ${2:F}, ${3:T}] = stft(${1:X}, ${2:optional_Ts}, 'Window', ${3:value}, 'OverlapLength', ${4:value}, 'FFTLength', ${5:value}, 'Centered', ${6:value}, 'OutputTimeDimension', ${7:value})'''
        description: '''[${1:S}, ${2:F}, ${3:T}] = stft(${1:X}, ${2:optional_Ts}, 'Window', ${3:value}, 'OverlapLength', ${4:value}, 'FFTLength', ${5:value}, 'Centered', ${6:value}, 'OutputTimeDimension', ${7:value})'''


    "filtic":
        prefix: "filtic"
        body: '''${1:z} = filtic(${1:b}, ${2:a}, ${3:y}, ${4:optional_x})'''
        description: '''${1:z} = filtic(${1:b}, ${2:a}, ${3:y}, ${4:optional_x})'''


    "sos2tf":
        prefix: "sos2tf"
        body: '''[${1:b}, ${2:a}] = sos2tf(${1:sos}, ${2:optional_g})'''
        description: '''[${1:b}, ${2:a}] = sos2tf(${1:sos}, ${2:optional_g})'''


    "demod":
        prefix: "demod"
        body: '''${1:x} = demod(${1:y}, ${2:fc}, ${3:fs}, ${4:'pwm'}, ${5:'centered'})'''
        description: '''${1:x} = demod(${1:y}, ${2:fc}, ${3:fs}, ${4:'pwm'}, ${5:'centered'})'''


    "rlevinson":
        prefix: "rlevinson"
        body: '''[${1:r}, ${2:u}, ${3:k}, ${4:e}] = rlevinson(${1:a}, ${2:efinal})'''
        description: '''[${1:r}, ${2:u}, ${3:k}, ${4:e}] = rlevinson(${1:a}, ${2:efinal})'''


    "xcov":
        prefix: "xcov"
        body: '''[${1:c}, ${2:lags}] = xcov(${1:x}, ${2:optional_y}, ${3:optional_maxlag}, ${4:optional_scaleopt})'''
        description: '''[${1:c}, ${2:lags}] = xcov(${1:x}, ${2:optional_y}, ${3:optional_maxlag}, ${4:optional_scaleopt})'''


    "undershoot":
        prefix: "undershoot"
        body: '''[${1:OS}, ${2:OSLEV}, ${3:OSINST}] = undershoot(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'Region', ${4:value}, 'SeekFactor', ${5:value}, 'StateLevels', ${6:value}, 'Tolerance', ${7:value})'''
        description: '''[${1:OS}, ${2:OSLEV}, ${3:OSINST}] = undershoot(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'Region', ${4:value}, 'SeekFactor', ${5:value}, 'StateLevels', ${6:value}, 'Tolerance', ${7:value})'''


    "sos2cell":
        prefix: "sos2cell"
        body: '''${1:c} = sos2cell(${1:m}, ${2:optional_g})'''
        description: '''${1:c} = sos2cell(${1:m}, ${2:optional_g})'''


    "maxflat":
        prefix: "maxflat"
        body: '''${1:b} = maxflat(${1:n}, ${2:'sym'}, ${3:Wn}, ${4:optional_'design_flag'})'''
        description: '''${1:b} = maxflat(${1:n}, ${2:'sym'}, ${3:Wn}, ${4:optional_'design_flag'})'''


    "digitrevorder":
        prefix: "digitrevorder"
        body: '''[${1:y}, ${2:i}] = digitrevorder(${1:x}, ${2:r})'''
        description: '''[${1:y}, ${2:i}] = digitrevorder(${1:x}, ${2:r})'''


    "polyscale":
        prefix: "polyscale"
        body: '''${1:b} = polyscale(${1:a}, ${2:alpha})'''
        description: '''${1:b} = polyscale(${1:a}, ${2:alpha})'''


    "finddelay":
        prefix: "finddelay"
        body: '''${1:D} = finddelay(${1:X}, ${2:Y}, ${3:optional_maxlag})'''
        description: '''${1:D} = finddelay(${1:X}, ${2:Y}, ${3:optional_maxlag})'''


    "dpssclear":
        prefix: "dpssclear"
        body: '''dpssclear(${1:n}, ${2:nw})'''
        description: '''dpssclear(${1:n}, ${2:nw})'''


    "impinvar":
        prefix: "impinvar"
        body: '''[${1:bz}, ${2:az}] = impinvar(${1:b}, ${2:a}, ${3:fs}, ${4:optional_tol})'''
        description: '''[${1:bz}, ${2:az}] = impinvar(${1:b}, ${2:a}, ${3:fs}, ${4:optional_tol})'''


    "pulstran":
        prefix: "pulstran"
        body: '''${1:y} = pulstran(${1:t}, ${2:d}, ${3:p}, ${4:optional_fs})'''
        description: '''${1:y} = pulstran(${1:t}, ${2:d}, ${3:p}, ${4:optional_fs})'''


    "ifwht":
        prefix: "ifwht"
        body: '''${1:y} = ifwht(${1:x}, ${2:n}, ${3:optional_ordering})'''
        description: '''${1:y} = ifwht(${1:x}, ${2:n}, ${3:optional_ordering})'''


    "is2rc":
        prefix: "is2rc"
        body: '''${1:k} = is2rc(${1:isin})'''
        description: '''${1:k} = is2rc(${1:isin})'''


    "slewrate":
        prefix: "slewrate"
        body: '''[${1:S}, ${2:LT}, ${3:UT}, ${4:LL}, ${5:UL}] = slewrate(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'StateLevels', ${4:value}, 'Tolerance', ${5:value})'''
        description: '''[${1:S}, ${2:LT}, ${3:UT}, ${4:LL}, ${5:UL}] = slewrate(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'StateLevels', ${4:value}, 'Tolerance', ${5:value})'''


    "pentropy":
        prefix: "pentropy"
        body: '''[${1:se}, ${2:t}] = pentropy(${1:p}, ${2:fp}, ${3:tp}, 'Instantaneous', ${4:value}, 'Scaled', ${5:value}, 'FrequencyLimits', ${6:value}, 'TimeLimits', ${7:value})'''
        description: '''[${1:se}, ${2:t}] = pentropy(${1:p}, ${2:fp}, ${3:tp}, 'Instantaneous', ${4:value}, 'Scaled', ${5:value}, 'FrequencyLimits', ${6:value}, 'TimeLimits', ${7:value})'''


    "sfdr":
        prefix: "sfdr"
        body: '''[${1:r}, ${2:spurpow}, ${3:spurfreq}] = sfdr(${1:sxx}, ${2:f}, ${3:optional_msd}, ${4:'power'})'''
        description: '''[${1:r}, ${2:spurpow}, ${3:spurfreq}] = sfdr(${1:sxx}, ${2:f}, ${3:optional_msd}, ${4:'power'})'''


    "plomb":
        prefix: "plomb"
        body: '''[${1:pxx}, ${2:fvec}] = plomb(${1:x}, ${2:fs}, ${3:fvec}, ${4:optional_spectrumtype})'''
        description: '''[${1:pxx}, ${2:fvec}] = plomb(${1:x}, ${2:fs}, ${3:fvec}, ${4:optional_spectrumtype})'''


    "findpeaks":
        prefix: "findpeaks"
        body: '''[${1:pks}, ${2:locs}, ${3:w}, ${4:p}] = findpeaks(${1:data}, ${2:Fs}, 'NPeaks', ${3:value}, 'SortStr', ${4:value}, 'MinPeakHeight', ${5:value}, 'MinPeakProminence', ${6:value}, 'Threshold', ${7:value}, 'MinPeakDistance', ${8:value}, 'WidthReference', ${9:value}, 'MinPeakWidth', ${10:value}, 'MaxPeakWidth', ${11:value}, 'Annotate', ${12:value})'''
        description: '''[${1:pks}, ${2:locs}, ${3:w}, ${4:p}] = findpeaks(${1:data}, ${2:Fs}, 'NPeaks', ${3:value}, 'SortStr', ${4:value}, 'MinPeakHeight', ${5:value}, 'MinPeakProminence', ${6:value}, 'Threshold', ${7:value}, 'MinPeakDistance', ${8:value}, 'WidthReference', ${9:value}, 'MinPeakWidth', ${10:value}, 'MaxPeakWidth', ${11:value}, 'Annotate', ${12:value})'''


    "medfilt1":
        prefix: "medfilt1"
        body: '''${1:y} = medfilt1(${1:x}, ${2:optional_n}, ${3:optional_nanflag}, ${4:optional_padding})'''
        description: '''${1:y} = medfilt1(${1:x}, ${2:optional_n}, ${3:optional_nanflag}, ${4:optional_padding})'''


    "ellip":
        prefix: "ellip"
        body: '''[${1:A}, ${2:B}, ${3:C}, ${4:D}] = ellip(${1:n}, ${2:Rp}, ${3:Rs}, ${4:Wp}, ${5:ftype}, ${6:optional_'s'})'''
        description: '''[${1:A}, ${2:B}, ${3:C}, ${4:D}] = ellip(${1:n}, ${2:Rp}, ${3:Rs}, ${4:Wp}, ${5:ftype}, ${6:optional_'s'})'''


    "lp2hp":
        prefix: "lp2hp"
        body: '''[${1:At}, ${2:Bt}, ${3:Ct}, ${4:Dt}] = lp2hp(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:Wo})'''
        description: '''[${1:At}, ${2:Bt}, ${3:Ct}, ${4:Dt}] = lp2hp(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:Wo})'''


    "pulsewidth":
        prefix: "pulsewidth"
        body: '''[${1:W}, ${2:INITCROSS}, ${3:FINALCROSS}, ${4:MIDLEV}] = pulsewidth(${1:X}, ${2:optional_T}, 'MidPercentReferenceLevel', ${3:value}, 'Polarity', ${4:value}, 'StateLevels', ${5:value}, 'Tolerance', ${6:value})'''
        description: '''[${1:W}, ${2:INITCROSS}, ${3:FINALCROSS}, ${4:MIDLEV}] = pulsewidth(${1:X}, ${2:optional_T}, 'MidPercentReferenceLevel', ${3:value}, 'Polarity', ${4:value}, 'StateLevels', ${5:value}, 'Tolerance', ${6:value})'''


    "peig":
        prefix: "peig"
        body: '''[${1:S}, ${2:f}, ${3:v}, ${4:e}] = peig(${1:x}, ${2:p}, ${3:nfft}, ${4:fs}, ${5:nwin}, ${6:noverlap}, ${7:optional_'corr'}, ${8:optional_freqrange})'''
        description: '''[${1:S}, ${2:f}, ${3:v}, ${4:e}] = peig(${1:x}, ${2:p}, ${3:nfft}, ${4:fs}, ${5:nwin}, ${6:noverlap}, ${7:optional_'corr'}, ${8:optional_freqrange})'''


    "grpdelay":
        prefix: "grpdelay"
        body: '''${1:gd} = grpdelay(${1:d}, ${2:f}, ${3:optional_fs})'''
        description: '''${1:gd} = grpdelay(${1:d}, ${2:f}, ${3:optional_fs})'''


    "pmcov":
        prefix: "pmcov"
        body: '''[${1:pxx}, ${2:f}, ${3:pxxc}] = pmcov(${1:x}, ${2:order}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:'ConfidenceLevel'}, ${7:optional_probability})'''
        description: '''[${1:pxx}, ${2:f}, ${3:pxxc}] = pmcov(${1:x}, ${2:order}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:'ConfidenceLevel'}, ${7:optional_probability})'''


    "spectrogram":
        prefix: "spectrogram"
        body: '''[${1:s}, ${2:f}, ${3:t}, ${4:ps}, ${5:fc}, ${6:tc}] = spectrogram(${1:x}, ${2:window}, ${3:noverlap}, ${4:f}, ${5:fs}, ${6:'reassigned'}, ${7:optional_freqrange}, ${8:optional_spectrumtype}, ${9:'MinThreshold'}, ${10:thresh}, ${11:optional_freqloc}, 'OutputTimeDimension', ${12:value})'''
        description: '''[${1:s}, ${2:f}, ${3:t}, ${4:ps}, ${5:fc}, ${6:tc}] = spectrogram(${1:x}, ${2:window}, ${3:noverlap}, ${4:f}, ${5:fs}, ${6:'reassigned'}, ${7:optional_freqrange}, ${8:optional_spectrumtype}, ${9:'MinThreshold'}, ${10:thresh}, ${11:optional_freqloc}, 'OutputTimeDimension', ${12:value})'''


    "xcorr2":
        prefix: "xcorr2"
        body: '''${1:c} = xcorr2(${1:a}, ${2:optional_b})'''
        description: '''${1:c} = xcorr2(${1:a}, ${2:optional_b})'''


    "arburg":
        prefix: "arburg"
        body: '''[${1:a}, ${2:e}, ${3:rc}] = arburg(${1:x}, ${2:p})'''
        description: '''[${1:a}, ${2:e}, ${3:rc}] = arburg(${1:x}, ${2:p})'''


    "intfilt":
        prefix: "intfilt"
        body: '''${1:b} = intfilt(${1:l}, ${2:n}, ${3:'Lagrange'})'''
        description: '''${1:b} = intfilt(${1:l}, ${2:n}, ${3:'Lagrange'})'''

