# MATLAB snippets generated using https://github.com/aminya/Matlab-Snippets
'.source.matlab, source.m':

    "bitget":
        prefix: "bitget"
        body: '''bitget(${1:A}, ${2:bit}, ${3:assumedtype})'''
        description: '''bitget(A, bit, assumedtype)'''


    "setxor":
        prefix: "setxor"
        body: '''[${1:C}, ${2:ia}, ${3:ib}] = setxor(${1:A}, ${2:B}, ${3:optional_'rows'})'''
        description: '''[C, ia, ib] = setxor(A, B, optional_'rows')'''


    "ismember":
        prefix: "ismember"
        body: '''[${1:Lia}, ${2:Locb}] = ismember(${1:A}, ${2:B}, ${3:optional_'rows'})'''
        description: '''[Lia, Locb] = ismember(A, B, optional_'rows')'''


    "any":
        prefix: "any"
        body: '''any(${1:A}, ${2:optional_dim})'''
        description: '''any(A, optional_dim)'''


    "vertcat":
        prefix: "vertcat"
        body: '''${1:C} = vertcat(${1:A})'''
        description: '''C = vertcat(A)'''


    "bitset":
        prefix: "bitset"
        body: '''bitset(${1:A}, ${2:bit}, ${3:optional_V}, ${4:assumedtype})'''
        description: '''bitset(A, bit, optional_V, assumedtype)'''


    "subsref":
        prefix: "subsref"
        body: '''${1:B} = subsref(${1:A}, ${2:S})'''
        description: '''B = subsref(A, S)'''


    "bitand":
        prefix: "bitand"
        body: '''bitand(${1:A}, ${2:B}, ${3:assumedtype})'''
        description: '''bitand(A, B, assumedtype)'''


    "intersect":
        prefix: "intersect"
        body: '''[${1:C}, ${2:ia}, ${3:ib}] = intersect(${1:A}, ${2:B}, ${3:optional_'rows'})'''
        description: '''[C, ia, ib] = intersect(A, B, optional_'rows')'''


    "idivide":
        prefix: "idivide"
        body: '''idivide(${1:A}, ${2:B}, ${3:opt})'''
        description: '''idivide(A, B, opt)'''


    "bitor":
        prefix: "bitor"
        body: '''bitor(${1:A}, ${2:B}, ${3:assumedtype})'''
        description: '''bitor(A, B, assumedtype)'''


    "setdiff":
        prefix: "setdiff"
        body: '''[${1:C}, ${2:ia}] = setdiff(${1:A}, ${2:B}, ${3:optional_'rows'})'''
        description: '''[C, ia] = setdiff(A, B, optional_'rows')'''


    "subsasgn":
        prefix: "subsasgn"
        body: '''${1:A} = subsasgn(${1:A}, ${2:S}, ${3:B})'''
        description: '''A = subsasgn(A, S, B)'''


    "unique":
        prefix: "unique"
        body: '''[${1:C}, ${2:ia}, ${3:ic}] = unique(${1:A}, ${2:optional_'rows'}, ${3:optional_occurrence})'''
        description: '''[C, ia, ic] = unique(A, optional_'rows', optional_occurrence)'''


    "bitcmp":
        prefix: "bitcmp"
        body: '''bitcmp(${1:A}, ${2:assumedtype})'''
        description: '''bitcmp(A, assumedtype)'''


    "ismembertol":
        prefix: "ismembertol"
        body: '''[${1:LIA}, ${2:L}] = ismembertol(${1:A}, ${2:B}, ${3:optional_tol}, 'OutputAllIndices', ${4:value}, 'ByRows', ${5:value}, 'DataScale', ${6:value})'''
        description: '''[LIA, L] = ismembertol(A, B, optional_tol, 'OutputAllIndices', value, 'ByRows', value, 'DataScale', value)'''


    "union":
        prefix: "union"
        body: '''[${1:C}, ${2:ia}, ${3:ib}] = union(${1:A}, ${2:B}, ${3:optional_'rows'})'''
        description: '''[C, ia, ib] = union(A, B, optional_'rows')'''


    "bitxor":
        prefix: "bitxor"
        body: '''bitxor(${1:A}, ${2:B}, ${3:assumedtype})'''
        description: '''bitxor(A, B, assumedtype)'''


    "all":
        prefix: "all"
        body: '''all(${1:A}, ${2:optional_dim})'''
        description: '''all(A, optional_dim)'''


    "bitshift":
        prefix: "bitshift"
        body: '''bitshift(${1:A}, ${2:k}, ${3:assumedtype})'''
        description: '''bitshift(A, k, assumedtype)'''


    "uniquetol":
        prefix: "uniquetol"
        body: '''[${1:C}, ${2:IA}, ${3:IC}] = uniquetol(${1:A}, ${2:optional_tol}, 'OutputAllIndices', ${3:value}, 'ByRows', ${4:value}, 'DataScale', ${5:value})'''
        description: '''[C, IA, IC] = uniquetol(A, optional_tol, 'OutputAllIndices', value, 'ByRows', value, 'DataScale', value)'''


    "horzcat":
        prefix: "horzcat"
        body: '''${1:C} = horzcat(${1:A})'''
        description: '''C = horzcat(A)'''

