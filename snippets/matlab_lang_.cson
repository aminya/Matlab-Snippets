# MATLAB snippets generated using https://github.com/aminya/Matlab-Snippets
'.source.matlab, source.m':

    "MException.throwAsCaller":
        prefix: "MException.throwAsCaller"
        body: '''MException.throwAsCaller(${1:exception})'''
        description: '''MException.throwAsCaller(exception)'''


    "MException.rethrow":
        prefix: "MException.rethrow"
        body: '''MException.rethrow(${1:exception})'''
        description: '''MException.rethrow(exception)'''


    "MException.throw":
        prefix: "MException.throw"
        body: '''MException.throw(${1:exception})'''
        description: '''MException.throw(exception)'''


    "validateattributes":
        prefix: "validateattributes"
        body: '''validateattributes(${1:A}, ${2:classes}, ${3:attributes})'''
        description: '''validateattributes(A, classes, attributes)'''


    "MException.addCause":
        prefix: "MException.addCause"
        body: '''${1:baseException} = MException.addCause(${1:baseException}, ${2:causeException})'''
        description: '''baseException = MException.addCause(baseException, causeException)'''


    "disp":
        prefix: "disp"
        body: '''disp(${1:X})'''
        description: '''disp(X)'''


    "assignin":
        prefix: "assignin"
        body: '''assignin(${1:workspace}, ${2:var})'''
        description: '''assignin(workspace, var)'''


    "display":
        prefix: "display"
        body: '''display(${1:X})'''
        description: '''display(X)'''


    "warning":
        prefix: "warning"
        body: '''${1:warnStruct} = warning()'''
        description: '''warnStruct = warning()'''


    "MException.getReport":
        prefix: "MException.getReport"
        body: '''${1:msgText} = MException.getReport(${1:exception}, ${2:type}, ${3:'hyperlinks'}, ${4:hlink})'''
        description: '''msgText = MException.getReport(exception, type, 'hyperlinks', hlink)'''


    "mfilename":
        prefix: "mfilename"
        body: '''${1:M} = mfilename(${1:'arg'})'''
        description: '''M = mfilename('arg')'''


    "matlab.lang.correction.ReplaceIdentifierCorrection":
        prefix: "matlab.lang.correction.ReplaceIdentifierCorrection"
        body: '''${1:RIC} = matlab.lang.correction.ReplaceIdentifierCorrection(${1:identifier}, ${2:replacement})'''
        description: '''RIC = matlab.lang.correction.ReplaceIdentifierCorrection(identifier, replacement)'''


    "MException":
        prefix: "MException"
        body: '''${1:ME} = MException(${1:message})'''
        description: '''ME = MException(message)'''


    "error":
        prefix: "error"
        body: '''error(${1:msg}, ${2:optional_A})'''
        description: '''error(msg, optional_A)'''


    "matlab.lang.correction.Correction.error":
        prefix: "matlab.lang.correction.Correction.error"
        body: '''matlab.lang.correction.Correction.error(${1:correction}, ${2:msg}, ${3:optional_A})'''
        description: '''matlab.lang.correction.Correction.error(correction, msg, optional_A)'''


    "evalin":
        prefix: "evalin"
        body: '''evalin(${1:workspace})'''
        description: '''evalin(workspace)'''


    "matlab.lang.correction.AppendArgumentsCorrection":
        prefix: "matlab.lang.correction.AppendArgumentsCorrection"
        body: '''${1:AAC} = matlab.lang.correction.AppendArgumentsCorrection(${1:arguments})'''
        description: '''AAC = matlab.lang.correction.AppendArgumentsCorrection(arguments)'''


    "MException.last":
        prefix: "MException.last"
        body: '''MException.last(${1:optional_reset})'''
        description: '''MException.last(optional_reset)'''


    "message":
        prefix: "message"
        body: '''message(${1:msgid}, ${2:optional_params})'''
        description: '''message(msgid, optional_params)'''


    "run":
        prefix: "run"
        body: '''run(${1:scriptname})'''
        description: '''run(scriptname)'''


    "exist":
        prefix: "exist"
        body: '''exist(${1:name}, ${2:optional_kind})'''
        description: '''exist(name, optional_kind)'''


    "matlab.lang.correction.ConvertToFunctionNotationCorrection":
        prefix: "matlab.lang.correction.ConvertToFunctionNotationCorrection"
        body: '''${1:CFNC} = matlab.lang.correction.ConvertToFunctionNotationCorrection(${1:method})'''
        description: '''CFNC = matlab.lang.correction.ConvertToFunctionNotationCorrection(method)'''


    "MException.addCorrection":
        prefix: "MException.addCorrection"
        body: '''${1:baseException} = MException.addCorrection(${1:baseException}, ${2:correction})'''
        description: '''baseException = MException.addCorrection(baseException, correction)'''

